(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    249214,       5521]
NotebookOptionsPosition[    245489,       5396]
NotebookOutlinePosition[    245831,       5411]
CellTagsIndexPosition[    245788,       5408]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[{
 RowBox[{
  RowBox[{"q0", "=", 
   RowBox[{"Exp", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"-", 
       FractionBox[
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"\[Alpha]", "+", "1"}], ")"}], "2"], "2"]}], 
      SuperscriptBox["x", "2"]}], "-", 
     RowBox[{
      FractionBox[
       RowBox[{"\[Alpha]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"2", "\[Alpha]"}], "+", "1"}], ")"}]}], "4"], 
      SuperscriptBox["y", "2"]}], "+", 
     RowBox[{"\[Alpha]", 
      RowBox[{"(", 
       RowBox[{"\[Alpha]", "+", "1"}], ")"}], "x", " ", "y"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dq", "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"l", "+", 
      RowBox[{"m", " ", "x"}], "+", 
      RowBox[{"n", " ", "y"}], "+", 
      RowBox[{"r", " ", 
       SuperscriptBox["x", "2"]}], "+", 
      RowBox[{"s", " ", 
       SuperscriptBox["y", "2"]}], "+", 
      RowBox[{"t", " ", "x", " ", "y"}]}], ")"}], "q0"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"-", 
      SuperscriptBox["\[Alpha]", "2"]}], 
     RowBox[{"D", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"+", "x"}], ")"}], "q0"}], ",", "x"}], "]"}]}], "-", 
    RowBox[{
     SuperscriptBox["\[Alpha]", "2"], 
     RowBox[{"D", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"y", "-", "x"}], ")"}], "dq"}], ",", "x"}], "]"}]}], "+", 
    RowBox[{
     FractionBox["\[Alpha]", "2"], 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       RowBox[{
        FractionBox["\[Alpha]", "2"], 
        SuperscriptBox["y", "2"]}]}], ")"}], "dq"}], "+", 
    RowBox[{"D", "[", 
     RowBox[{"dq", ",", 
      RowBox[{"{", 
       RowBox[{"y", ",", "2"}], "}"}]}], "]"}]}], "//", "Simplify"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"%", "/", "q0"}], "//", "Simplify"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Collect", "[", 
  RowBox[{
   RowBox[{"%", "//", "Expand"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.6700090630102577`*^9, 3.670009345458395*^9}, {
   3.6700093951895204`*^9, 3.6700094119116592`*^9}, 3.670009468504356*^9, {
   3.6700098229124265`*^9, 3.6700098244514513`*^9}, {3.6700099084243846`*^9, 
   3.670009941953718*^9}, {3.6700100586044207`*^9, 3.670010074786198*^9}, {
   3.6700103629881706`*^9, 3.670010376391098*^9}, {3.670019526179741*^9, 
   3.6700196089929028`*^9}, 3.6700198427966385`*^9, {3.670020691816169*^9, 
   3.670020702755454*^9}, {3.670020862356764*^9, 3.670020862770039*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"2", " ", "s"}], "-", 
  SuperscriptBox["\[Alpha]", "2"], "+", 
  RowBox[{"y", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "n"}], " ", "\[Alpha]"}], "-", 
     RowBox[{"m", " ", 
      SuperscriptBox["\[Alpha]", "2"]}], "-", 
     RowBox[{"2", " ", "n", " ", 
      SuperscriptBox["\[Alpha]", "2"]}]}], ")"}]}], "+", 
  RowBox[{
   SuperscriptBox["y", "2"], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "2"}], " ", "s", " ", "\[Alpha]"}], "-", 
     RowBox[{"4", " ", "s", " ", 
      SuperscriptBox["\[Alpha]", "2"]}], "-", 
     RowBox[{"t", " ", 
      SuperscriptBox["\[Alpha]", "2"]}]}], ")"}]}], "+", 
  RowBox[{
   SuperscriptBox["x", "2"], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"2", " ", "t", " ", "\[Alpha]"}], "+", 
     SuperscriptBox["\[Alpha]", "2"], "+", 
     RowBox[{"2", " ", "r", " ", 
      SuperscriptBox["\[Alpha]", "2"]}], "+", 
     RowBox[{"2", " ", "t", " ", 
      SuperscriptBox["\[Alpha]", "2"]}], "+", 
     RowBox[{"2", " ", 
      SuperscriptBox["\[Alpha]", "3"]}], "+", 
     SuperscriptBox["\[Alpha]", "4"]}], ")"}]}], "+", 
  RowBox[{"x", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"2", " ", "n", " ", "\[Alpha]"}], "+", 
     RowBox[{"m", " ", 
      SuperscriptBox["\[Alpha]", "2"]}], "+", 
     RowBox[{"2", " ", "n", " ", 
      SuperscriptBox["\[Alpha]", "2"]}], "+", 
     RowBox[{"y", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"4", " ", "s", " ", "\[Alpha]"}], "-", 
        RowBox[{"t", " ", "\[Alpha]"}], "-", 
        RowBox[{"2", " ", "r", " ", 
         SuperscriptBox["\[Alpha]", "2"]}], "+", 
        RowBox[{"4", " ", "s", " ", 
         SuperscriptBox["\[Alpha]", "2"]}], "-", 
        RowBox[{"t", " ", 
         SuperscriptBox["\[Alpha]", "2"]}], "-", 
        SuperscriptBox["\[Alpha]", "3"], "-", 
        SuperscriptBox["\[Alpha]", "4"]}], ")"}]}]}], ")"}]}]}]], "Output",
 CellChangeTimes->{
  3.6700099755160737`*^9, 3.6700100774569783`*^9, {3.6700103639247923`*^9, 
   3.670010371942133*^9}, {3.670019531993614*^9, 3.6700196098384657`*^9}, 
   3.670019998985676*^9, {3.6700206970276394`*^9, 3.670020703358857*^9}, 
   3.6700208649905186`*^9, 3.670077143088652*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"2", " ", "s"}], "-", 
        SuperscriptBox["\[Alpha]", "2"]}], ",", "\[IndentingNewLine]", 
       RowBox[{"+", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"-", "n"}], " ", "\[Alpha]"}], "-", 
          RowBox[{"m", " ", 
           SuperscriptBox["\[Alpha]", "2"]}], "-", 
          RowBox[{"2", " ", "n", " ", 
           SuperscriptBox["\[Alpha]", "2"]}]}], ")"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"+", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"-", "2"}], " ", "s", " ", "\[Alpha]"}], "-", 
          RowBox[{"4", " ", "s", " ", 
           SuperscriptBox["\[Alpha]", "2"]}], "-", 
          RowBox[{"t", " ", 
           SuperscriptBox["\[Alpha]", "2"]}]}], ")"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"+", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"2", " ", "t", " ", "\[Alpha]"}], "+", 
          SuperscriptBox["\[Alpha]", "2"], "+", 
          RowBox[{"2", " ", "r", " ", 
           SuperscriptBox["\[Alpha]", "2"]}], "+", 
          RowBox[{"2", " ", "t", " ", 
           SuperscriptBox["\[Alpha]", "2"]}], "+", 
          RowBox[{"2", " ", 
           SuperscriptBox["\[Alpha]", "3"]}], "+", 
          SuperscriptBox["\[Alpha]", "4"]}], ")"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"+", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"2", " ", "n", " ", "\[Alpha]"}], "+", 
          RowBox[{"m", " ", 
           SuperscriptBox["\[Alpha]", "2"]}], "+", 
          RowBox[{"2", " ", "n", " ", 
           SuperscriptBox["\[Alpha]", "2"]}]}], ")"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"+", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"4", " ", "s", " ", "\[Alpha]"}], "-", 
          RowBox[{"t", " ", "\[Alpha]"}], "-", 
          RowBox[{"2", " ", "r", " ", 
           SuperscriptBox["\[Alpha]", "2"]}], "+", 
          RowBox[{"4", " ", "s", " ", 
           SuperscriptBox["\[Alpha]", "2"]}], "-", 
          RowBox[{"t", " ", 
           SuperscriptBox["\[Alpha]", "2"]}], "-", 
          SuperscriptBox["\[Alpha]", "3"], "-", 
          SuperscriptBox["\[Alpha]", "4"]}], ")"}]}]}], "}"}], "\[Equal]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
      "}"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"m", ",", "n", ",", "r", ",", "s", ",", "t"}], "}"}]}], "]"}], "//",
   "Simplify"}]], "Input",
 CellChangeTimes->{{3.670010091895594*^9, 3.670010181691408*^9}, {
  3.6700103516065884`*^9, 3.670010351922799*^9}, {3.670010387996828*^9, 
  3.670010388127915*^9}, {3.670020718623025*^9, 3.6700207921850243`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"m", "\[Rule]", "0"}], ",", 
    RowBox[{"n", "\[Rule]", "0"}], ",", 
    RowBox[{"r", "\[Rule]", 
     RowBox[{
      FractionBox["1", "2"], " ", 
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"4", " ", "\[Alpha]"}], "+", 
        RowBox[{"3", " ", 
         SuperscriptBox["\[Alpha]", "2"]}]}], ")"}]}]}], ",", 
    RowBox[{"s", "\[Rule]", 
     FractionBox[
      SuperscriptBox["\[Alpha]", "2"], "2"]}], ",", 
    RowBox[{"t", "\[Rule]", 
     RowBox[{
      RowBox[{"-", "\[Alpha]"}], " ", 
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"2", " ", "\[Alpha]"}]}], ")"}]}]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.670010159991954*^9, 3.6700101821066837`*^9}, 
   3.6700103530375404`*^9, 3.6700103886602693`*^9, {3.6700207558528223`*^9, 
   3.6700207926983676`*^9}, 3.6700771436690397`*^9}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"po", "=", 
   RowBox[{"Exp", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"-", 
       FractionBox[
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"\[Alpha]", "+", "1"}], ")"}], "2"], "2"]}], 
      SuperscriptBox["x", "2"]}], "-", 
     RowBox[{
      FractionBox[
       RowBox[{"\[Alpha]", 
        RowBox[{"(", 
         RowBox[{"\[Alpha]", "+", "1"}], ")"}]}], "2"], 
      SuperscriptBox["y", "2"]}], "+", 
     RowBox[{"\[Alpha]", 
      RowBox[{"(", 
       RowBox[{"\[Alpha]", "+", "1"}], ")"}], "x", " ", "y"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pi", "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "+", 
      RowBox[{
       FractionBox["1", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"4", " ", "\[Alpha]"}], "+", 
         RowBox[{"3", " ", 
          SuperscriptBox["\[Alpha]", "2"]}]}], ")"}], 
       SuperscriptBox["x", "2"]}], "+", 
      RowBox[{
       FractionBox[
        SuperscriptBox["\[Alpha]", "2"], "2"], 
       SuperscriptBox["y", "2"]}], "-", 
      RowBox[{"\[Alpha]", " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "\[Alpha]"}]}], ")"}], "x", " ", "y"}]}], ")"}], 
    "po"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.670010886541911*^9, 3.6700109274121304`*^9}, {
  3.6700110120044756`*^9, 3.670011019839696*^9}, {3.6700110725798244`*^9, 
  3.6700111503986607`*^9}, {3.6700210743769913`*^9, 3.670021083529086*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Assuming", "[", 
  RowBox[{
   RowBox[{"\[Alpha]", ">", "0"}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{"po", ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", 
       RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}]}], "]"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Assuming", "[", 
  RowBox[{
   RowBox[{"\[Alpha]", ">", "0"}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{"pi", ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", 
       RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}]}], "]"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"%", "//", "Simplify"}]}], "Input",
 CellChangeTimes->{
  3.6700111552178717`*^9, {3.6700112587048035`*^9, 3.6700112598545694`*^9}, {
   3.670021095374977*^9, 3.670021096681847*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "2"]}], " ", 
     SuperscriptBox["x", "2"], " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", 
   SqrtBox[
    RowBox[{"2", " ", "\[Pi]"}]]}], 
  SqrtBox[
   RowBox[{"\[Alpha]", " ", 
    RowBox[{"(", 
     RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]]]], "Output",
 CellChangeTimes->{3.670011155893321*^9, 3.670011251531025*^9, 
  3.670011332466934*^9, 3.6700211054326773`*^9, 3.6700771602861085`*^9}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "2"]}], " ", 
     SuperscriptBox["x", "2"], " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", 
   SqrtBox[
    FractionBox["\[Pi]", "2"]], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"2", " ", 
      SqrtBox[
       RowBox[{"\[Alpha]", " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]]}], "+", 
     RowBox[{"3", " ", 
      SqrtBox[
       RowBox[{
        SuperscriptBox["\[Alpha]", "3"], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]]}], "+", 
     RowBox[{
      SuperscriptBox["x", "2"], " ", 
      RowBox[{"(", 
       RowBox[{
        SqrtBox[
         RowBox[{"\[Alpha]", " ", 
          RowBox[{"(", 
           RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], "+", 
        RowBox[{"3", " ", 
         SqrtBox[
          RowBox[{
           SuperscriptBox["\[Alpha]", "3"], " ", 
           RowBox[{"(", 
            RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]]}], "+", 
        RowBox[{"2", " ", 
         SqrtBox[
          RowBox[{
           SuperscriptBox["\[Alpha]", "5"], " ", 
           RowBox[{"(", 
            RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]]}]}], ")"}]}]}], ")"}]}], 
  RowBox[{"\[Alpha]", " ", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"1", "+", "\[Alpha]"}], ")"}], "2"]}]]], "Output",
 CellChangeTimes->{3.670011155893321*^9, 3.670011251531025*^9, 
  3.670011332466934*^9, 3.6700211054326773`*^9, 3.670077244941498*^9}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "2"]}], " ", 
     SuperscriptBox["x", "2"], " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", 
   SqrtBox[
    FractionBox["\[Pi]", "2"]], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"2", " ", 
      SqrtBox[
       RowBox[{"\[Alpha]", " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]]}], "+", 
     RowBox[{"3", " ", 
      SqrtBox[
       RowBox[{
        SuperscriptBox["\[Alpha]", "3"], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]]}], "+", 
     RowBox[{
      SuperscriptBox["x", "2"], " ", 
      RowBox[{"(", 
       RowBox[{
        SqrtBox[
         RowBox[{"\[Alpha]", " ", 
          RowBox[{"(", 
           RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], "+", 
        RowBox[{"3", " ", 
         SqrtBox[
          RowBox[{
           SuperscriptBox["\[Alpha]", "3"], " ", 
           RowBox[{"(", 
            RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]]}], "+", 
        RowBox[{"2", " ", 
         SqrtBox[
          RowBox[{
           SuperscriptBox["\[Alpha]", "5"], " ", 
           RowBox[{"(", 
            RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]]}]}], ")"}]}]}], ")"}]}], 
  RowBox[{"\[Alpha]", " ", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"1", "+", "\[Alpha]"}], ")"}], "2"]}]]], "Output",
 CellChangeTimes->{3.670011155893321*^9, 3.670011251531025*^9, 
  3.670011332466934*^9, 3.6700211054326773`*^9, 3.6700772453217497`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"Exp", "[", 
    RowBox[{
     FractionBox[
      RowBox[{"-", "1"}], "2"], 
     RowBox[{"(", 
      RowBox[{"a", "+", "1"}], ")"}], 
     SuperscriptBox["x", "2"]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "R", ",", "\[Infinity]"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6700117809026375`*^9, 3.6700118040810766`*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     SqrtBox[
      FractionBox["\[Pi]", "2"]], " ", 
     RowBox[{"Erfc", "[", 
      FractionBox[
       RowBox[{
        SqrtBox[
         RowBox[{"1", "+", "a"}]], " ", "R"}], 
       SqrtBox["2"]], "]"}]}], 
    SqrtBox[
     RowBox[{"1", "+", "a"}]]], ",", 
   RowBox[{
    RowBox[{"Re", "[", "a", "]"}], ">", 
    RowBox[{"-", "1"}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.6700118187568517`*^9, 3.670077257671976*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Assuming", "[", 
  RowBox[{
   RowBox[{"a", ">", "0"}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"2", "+", 
        RowBox[{"3", "\[Alpha]"}], "+", 
        RowBox[{
         SuperscriptBox["x", "2"], 
         RowBox[{"(", 
          RowBox[{"1", "+", 
           RowBox[{"3", "\[Alpha]"}], "+", 
           RowBox[{"2", 
            SuperscriptBox["\[Alpha]", "2"]}]}], ")"}]}]}], ")"}], 
      RowBox[{"Exp", "[", 
       RowBox[{
        FractionBox[
         RowBox[{"-", "1"}], "2"], 
        RowBox[{"(", 
         RowBox[{"\[Alpha]", "+", "1"}], ")"}], 
        SuperscriptBox["x", "2"]}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "X", ",", "\[Infinity]"}], "}"}]}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.6700119348391733`*^9, 3.6700120037000427`*^9}, {
   3.6700217705707226`*^9, 3.6700218026130657`*^9}, 3.670021888874525*^9}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["1", "2"]}], " ", 
       SuperscriptBox["X", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"2", " ", "X", " ", 
        SqrtBox[
         RowBox[{"1", "+", "\[Alpha]"}]], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"2", " ", "\[Alpha]"}]}], ")"}]}], "+", 
       RowBox[{
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{
          FractionBox["1", "2"], " ", 
          SuperscriptBox["X", "2"], " ", 
          RowBox[{"(", 
           RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", 
        SqrtBox[
         RowBox[{"2", " ", "\[Pi]"}]], " ", 
        RowBox[{"(", 
         RowBox[{"3", "+", 
          RowBox[{"5", " ", "\[Alpha]"}]}], ")"}]}], "-", 
       RowBox[{
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{
          FractionBox["1", "2"], " ", 
          SuperscriptBox["X", "2"], " ", 
          RowBox[{"(", 
           RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", 
        SqrtBox[
         RowBox[{"2", " ", "\[Pi]"}]], " ", 
        RowBox[{"(", 
         RowBox[{"3", "+", 
          RowBox[{"5", " ", "\[Alpha]"}]}], ")"}], " ", 
        RowBox[{"Erf", "[", 
         FractionBox[
          RowBox[{"X", " ", 
           SqrtBox[
            RowBox[{"1", "+", "\[Alpha]"}]]}], 
          SqrtBox["2"]], "]"}]}]}], ")"}]}], 
    RowBox[{"2", " ", 
     SqrtBox[
      RowBox[{"1", "+", "\[Alpha]"}]]}]], ",", 
   RowBox[{
    RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
    RowBox[{"-", "1"}]}]}], "]"}]], "Output",
 CellChangeTimes->{{3.6700119878745003`*^9, 3.670012020805436*^9}, 
   3.6700218433111753`*^9, 3.6700772922990427`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"2", "+", 
          RowBox[{"3", "\[Alpha]"}], "+", 
          RowBox[{
           SuperscriptBox["X", "2"], 
           RowBox[{"(", 
            RowBox[{"1", "+", 
             RowBox[{"3", "\[Alpha]"}], "+", 
             RowBox[{"2", 
              SuperscriptBox["\[Alpha]", "2"]}]}], ")"}]}]}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"2", "+", 
          RowBox[{"3", "\[Alpha]"}], "+", 
          RowBox[{
           SuperscriptBox["x", "2"], 
           RowBox[{"(", 
            RowBox[{"1", "+", 
             RowBox[{"3", "\[Alpha]"}], "+", 
             RowBox[{"2", 
              SuperscriptBox["\[Alpha]", "2"]}]}], ")"}]}]}], ")"}]}], "}"}], 
      "*", 
      RowBox[{"Exp", "[", 
       RowBox[{
        FractionBox[
         RowBox[{"-", "1"}], "2"], 
        RowBox[{"(", 
         RowBox[{"\[Alpha]", "+", "1"}], ")"}], 
        SuperscriptBox["x", "2"]}], "]"}]}], "/.", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"X", "\[Rule]", "0.5"}], ",", 
       RowBox[{"\[Alpha]", "\[Rule]", "1"}]}], "}"}]}], "//", "Evaluate"}], 
   ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "5"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.67002275640038*^9, 3.6700227597896385`*^9}, {
  3.6700227942595987`*^9, 3.6700229809759703`*^9}, {3.6700230140349903`*^9, 
  3.6700230695649786`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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

     "]]}, 
   {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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
+FGjWUzMknWccNcZq93ZTs7P+dWqStMxomVimfPbED/qLJTLqu8YJbSj+JCN
gYKxDMJiTE3DhFuak1UMIwWTJzZGJIQOE0klP0JlmCn4Pn/rUVatYWJpJKLr
FBsFx1mNq0RKhohXyls9XvJQUKDLQ+HCu0GCo2PPW82NFORufd0gWzFAKE49
7OoUouB2ca7C8/cHiEvMcyzOmyl4cGZyr4LhAJEvlW8YvZWCImrjuXW9/YSV
J8782kHBpz+d1J4z9xNftxhIB8tT8Ny1cUNZy15iVi7HcKsiBYN3y55bv7eX
EFYX9MjZS8HaSjXREJZewtWhrbJDiYLa1C0P5bR7CLGPplbSQMF1916x7Wrr
InwvuSTVHKOgxk9rg2SJDmJudXOMry4F35reqFypbScs48ofKutR8BBnt4/9
9XZCu32zT/IJCloQi/fuVrURtJPlF28ZU/DPpXvNh263Eokam7fstqKgzFt6
2OaNzQRt6KvAgDUFaUMiQs51TYSfnzNPtA0Fh94EG6XdayKsPn1dZnGg4H4+
rZGq5UZC5qBze+c1Ct6pfuNkMd5AfJD5Ghlyh4KSo8I/iubqCZkapwdH/CjY
eJTz0pGCeiLRdlPA4l0K/nO+Lx/gVU/4pTi5WQRScPPvH3ePcNcTOqKbjFTC
KCgeGHnr8O46ol3QiTYeR0G5NuPtrNtrCJ1cIa6kBHI9bFd1fnyqJopPlDGe
+Y+C/OFpta2m1cR/D4RmPj+n4CeFxpw7yVWENWfZ96evKbgrx82m/8A3YuHf
xvvHCijIKvOMkh9TTkz/Phb4t5CCttv6nNt1yomR0Vt3X76nYLaJm/Sfta9E
e2vfLeYSCuZc8v3GfuUrUZz7yqHoKwXDcyxM9NXLCD87ZX2pRnJ+N8RXr0l+
Jm6Z2+q0NVHQYDjpxcmxUsLNJE4zoIWMf+IR3S2tlLDSZDw80E5BrQ/W5QJy
pYS2WKXc0z6yv4iH67yOfiIonWfo3FMUZK/Sy5wX/EhwNgTxF0xT8OUD9va1
9GKC6dt7bqtZMv6vs3eNNYqJ3+9EWD7/oWCQizDL5K0PRPPjkbmb/8j9XtOd
J7VURMQec28e5aTiqSccev9JFRDhR1J/RHFTsZ7XUKS3OZ8IVe6sVeelIktk
tZqCbz7hLYHlSRQqvr4ty8TZ844wY+bIN1lPxUXPU68Fn70ldhZFRn8To2KQ
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
9ppInMwWOeB9g47qgYlKzLxInFmMU0z2pOO/wLBXOnJAXPKL2jVzh44L+6oP
rbgcIhxj79MDH9AxhDla4QBxgKhmFJvSfkhH5rf23j0/lAlJq8JvPI/pqKXE
Vy53RZn4KTfsExZBtke5q36OUSLOlON0ZBwdXTe17fpF2U/kSbdUGSfQceJx
fYNq9j6C9sj+5ab/6BjDvLtnk9E+ouZczIWE53TMvOTDvCNhL3Fk9nf1i9d0
/OITlMymqkgknA5KsU6n467rA90J0wrEv/cifpKZdHySJu5+L16BeBegezAj
m44tNrL6CqvyhPSWl6/yCuj44k7UDYtqOWKdpon/l3JyP703+iiLe4ir6dOm
/pV03Owx1fW9WIaoowUc0qyi4+U0+p2bIEMEd+XMVdXScf3237t/qO8mGK7y
mjc00XGwSSIoy06KON/6jAhvoePallzbuiVJovDQAaHTbXRcjVv0Lw6SJFw5
rOrbO+l4Nv3Y6EjmLmI0rgT6B+jYnm3emMu3k9BgPr3p+SAdE0P0d/ulShDP
rSfmLw/TUbXgutuYhgRxUUEo49coHaP9KXHWAeJEY8XVzTMzdHS3Tety3rCD
kJPhWsz+TUer2u2pJ0vEiNDHiQ3X/tCx8nju6YQrYoTWhZqgxUU6tjYZM5wq
2U68+GxuWbhER4vTr9je2W8nWHYtHfb8R0f7uAFmm83bCdPQsC3EKh1lLE5l
X6kWJYp/i/9dWyPj62/ozbolSvwPeHTATg==
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{Automatic, Automatic},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{0, 5}, {0., 6.4999999999999325`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.670022956521681*^9, 3.670022985628069*^9}, {
   3.6700230388194995`*^9, 3.670023070656706*^9}, 3.670077301473153*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.6700244454674635`*^9, 3.67002444591076*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"q0", "=", 
   RowBox[{"Exp", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"-", 
       FractionBox[
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"\[Alpha]", "+", "1"}], ")"}], "2"], "2"]}], 
      SuperscriptBox["x", "2"]}], "-", 
     RowBox[{
      FractionBox[
       RowBox[{"\[Alpha]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"2", "\[Alpha]"}], "+", "1"}], ")"}]}], "4"], 
      SuperscriptBox["y", "2"]}], "+", 
     RowBox[{"\[Alpha]", 
      RowBox[{"(", 
       RowBox[{"\[Alpha]", "+", "1"}], ")"}], "x", " ", "y"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dq", "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"l", "+", 
      RowBox[{"m", " ", "x"}], "+", 
      RowBox[{"n", " ", "y"}], "+", 
      RowBox[{"r", " ", 
       SuperscriptBox["x", "2"]}], "+", 
      RowBox[{"s", " ", 
       SuperscriptBox["y", "2"]}], "+", 
      RowBox[{"t", " ", "x", " ", "y"}]}], ")"}], "q0"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"-", 
      SuperscriptBox["\[Alpha]", "2"]}], 
     RowBox[{"D", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"\[Epsilon]", " ", "x"}], ")"}], "q0"}], ",", "x"}], "]"}]}],
     "-", 
    RowBox[{
     SuperscriptBox["\[Alpha]", "2"], 
     RowBox[{"D", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"y", "-", "x"}], ")"}], "dq"}], ",", "x"}], "]"}]}], "+", 
    RowBox[{
     FractionBox["\[Alpha]", "2"], 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       RowBox[{
        FractionBox["\[Alpha]", "2"], 
        SuperscriptBox["y", "2"]}]}], ")"}], "dq"}], "+", 
    RowBox[{"D", "[", 
     RowBox[{"dq", ",", 
      RowBox[{"{", 
       RowBox[{"y", ",", "2"}], "}"}]}], "]"}]}], "//", "Simplify"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"%", "/", "q0"}], "//", "Simplify"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Collect", "[", 
  RowBox[{
   RowBox[{"%", "//", "Expand"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Collect", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"%", "/.", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"s", "\[Rule]", 
         RowBox[{
          SuperscriptBox["\[Alpha]", "2"], 
          RowBox[{"\[Epsilon]", "/", "2"}]}]}], ",", 
        RowBox[{"t", "\[Rule]", 
         RowBox[{
          RowBox[{"-", "\[Alpha]"}], " ", 
          RowBox[{"(", 
           RowBox[{"1", "+", 
            RowBox[{"2", " ", "\[Alpha]"}]}], ")"}], " ", "\[Epsilon]"}]}], 
        ",", 
        RowBox[{"m", "->", 
         RowBox[{
          RowBox[{"-", "n"}], " ", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"1", "+", 
             RowBox[{"2", " ", "\[Alpha]"}]}], ")"}], "/", "\[Alpha]"}]}]}]}],
        "}"}]}], "/.", 
     RowBox[{"n", "\[Rule]", "0"}]}], "//", "Simplify"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.6700090630102577`*^9, 3.670009345458395*^9}, {
   3.6700093951895204`*^9, 3.6700094119116592`*^9}, 3.670009468504356*^9, {
   3.6700098229124265`*^9, 3.6700098244514513`*^9}, {3.6700099084243846`*^9, 
   3.670009941953718*^9}, {3.6700100586044207`*^9, 3.670010074786198*^9}, {
   3.6700103629881706`*^9, 3.670010376391098*^9}, {3.670019526179741*^9, 
   3.6700196089929028`*^9}, 3.6700198427966385`*^9, {3.670020691816169*^9, 
   3.670020702755454*^9}, {3.670020862356764*^9, 3.670020862770039*^9}, {
   3.67002445415625*^9, 3.670024455512154*^9}, {3.670024620235875*^9, 
   3.670024632799245*^9}, {3.670024672678808*^9, 3.670024694956647*^9}, {
   3.6700248009492493`*^9, 3.670025005332387*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"2", " ", "s"}], "+", 
  RowBox[{"y", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "n"}], " ", "\[Alpha]"}], "-", 
     RowBox[{"m", " ", 
      SuperscriptBox["\[Alpha]", "2"]}], "-", 
     RowBox[{"2", " ", "n", " ", 
      SuperscriptBox["\[Alpha]", "2"]}]}], ")"}]}], "+", 
  RowBox[{
   SuperscriptBox["y", "2"], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "2"}], " ", "s", " ", "\[Alpha]"}], "-", 
     RowBox[{"4", " ", "s", " ", 
      SuperscriptBox["\[Alpha]", "2"]}], "-", 
     RowBox[{"t", " ", 
      SuperscriptBox["\[Alpha]", "2"]}]}], ")"}]}], "-", 
  RowBox[{
   SuperscriptBox["\[Alpha]", "2"], " ", "\[Epsilon]"}], "+", 
  RowBox[{
   SuperscriptBox["x", "2"], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"2", " ", "t", " ", "\[Alpha]"}], "+", 
     RowBox[{"2", " ", "r", " ", 
      SuperscriptBox["\[Alpha]", "2"]}], "+", 
     RowBox[{"2", " ", "t", " ", 
      SuperscriptBox["\[Alpha]", "2"]}], "+", 
     RowBox[{
      SuperscriptBox["\[Alpha]", "2"], " ", "\[Epsilon]"}], "+", 
     RowBox[{"2", " ", 
      SuperscriptBox["\[Alpha]", "3"], " ", "\[Epsilon]"}], "+", 
     RowBox[{
      SuperscriptBox["\[Alpha]", "4"], " ", "\[Epsilon]"}]}], ")"}]}], "+", 
  RowBox[{"x", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"2", " ", "n", " ", "\[Alpha]"}], "+", 
     RowBox[{"m", " ", 
      SuperscriptBox["\[Alpha]", "2"]}], "+", 
     RowBox[{"2", " ", "n", " ", 
      SuperscriptBox["\[Alpha]", "2"]}], "+", 
     RowBox[{"y", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"4", " ", "s", " ", "\[Alpha]"}], "-", 
        RowBox[{"t", " ", "\[Alpha]"}], "-", 
        RowBox[{"2", " ", "r", " ", 
         SuperscriptBox["\[Alpha]", "2"]}], "+", 
        RowBox[{"4", " ", "s", " ", 
         SuperscriptBox["\[Alpha]", "2"]}], "-", 
        RowBox[{"t", " ", 
         SuperscriptBox["\[Alpha]", "2"]}], "-", 
        RowBox[{
         SuperscriptBox["\[Alpha]", "3"], " ", "\[Epsilon]"}], "-", 
        RowBox[{
         SuperscriptBox["\[Alpha]", "4"], " ", "\[Epsilon]"}]}], ")"}]}]}], 
    ")"}]}]}]], "Output",
 CellChangeTimes->{
  3.6700099755160737`*^9, 3.6700100774569783`*^9, {3.6700103639247923`*^9, 
   3.670010371942133*^9}, {3.670019531993614*^9, 3.6700196098384657`*^9}, 
   3.670019998985676*^9, {3.6700206970276394`*^9, 3.670020703358857*^9}, 
   3.6700208649905186`*^9, 3.670024464959447*^9, {3.6700246267382064`*^9, 
   3.670024633424662*^9}, {3.670024684936973*^9, 3.6700246952878685`*^9}, {
   3.6700248175232887`*^9, 3.6700249171696634`*^9}, 3.6700249500775824`*^9, {
   3.6700249928710876`*^9, 3.6700250093580685`*^9}, 3.6700773044351254`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"-", 
    SuperscriptBox["x", "2"]}], " ", 
   SuperscriptBox["\[Alpha]", "2"], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "2"}], " ", "r"}], "+", "\[Epsilon]", "+", 
     RowBox[{"4", " ", "\[Alpha]", " ", "\[Epsilon]"}], "+", 
     RowBox[{"3", " ", 
      SuperscriptBox["\[Alpha]", "2"], " ", "\[Epsilon]"}]}], ")"}]}], "+", 
  RowBox[{"x", " ", "y", " ", 
   SuperscriptBox["\[Alpha]", "2"], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "2"}], " ", "r"}], "+", "\[Epsilon]", "+", 
     RowBox[{"4", " ", "\[Alpha]", " ", "\[Epsilon]"}], "+", 
     RowBox[{"3", " ", 
      SuperscriptBox["\[Alpha]", "2"], " ", "\[Epsilon]"}]}], 
    ")"}]}]}]], "Output",
 CellChangeTimes->{
  3.6700099755160737`*^9, 3.6700100774569783`*^9, {3.6700103639247923`*^9, 
   3.670010371942133*^9}, {3.670019531993614*^9, 3.6700196098384657`*^9}, 
   3.670019998985676*^9, {3.6700206970276394`*^9, 3.670020703358857*^9}, 
   3.6700208649905186`*^9, 3.670024464959447*^9, {3.6700246267382064`*^9, 
   3.670024633424662*^9}, {3.670024684936973*^9, 3.6700246952878685`*^9}, {
   3.6700248175232887`*^9, 3.6700249171696634`*^9}, 3.6700249500775824`*^9, {
   3.6700249928710876`*^9, 3.6700250093580685`*^9}, 3.6700773044711504`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"po", "=", 
   RowBox[{"Exp", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"-", 
       FractionBox[
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"\[Alpha]", "+", "1"}], ")"}], "2"], "2"]}], 
      SuperscriptBox["x", "2"]}], "-", 
     RowBox[{
      FractionBox[
       RowBox[{"\[Alpha]", 
        RowBox[{"(", 
         RowBox[{"\[Alpha]", "+", "1"}], ")"}]}], "2"], 
      SuperscriptBox["y", "2"]}], "+", 
     RowBox[{"\[Alpha]", 
      RowBox[{"(", 
       RowBox[{"\[Alpha]", "+", "1"}], ")"}], "x", " ", "y"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pi", "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "+", 
      RowBox[{"\[Epsilon]", 
       FractionBox["1", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"4", " ", "\[Alpha]"}], "+", 
         RowBox[{"3", " ", 
          SuperscriptBox["\[Alpha]", "2"]}]}], ")"}], 
       SuperscriptBox["x", "2"]}], "+", 
      RowBox[{"\[Epsilon]", 
       FractionBox[
        SuperscriptBox["\[Alpha]", "2"], "2"], 
       SuperscriptBox["y", "2"]}], "-", 
      RowBox[{"\[Epsilon]", " ", "\[Alpha]", " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "\[Alpha]"}]}], ")"}], "x", " ", "y"}]}], ")"}], 
    "po"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"pox", "=", 
  RowBox[{
   RowBox[{"Assuming", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"\[Alpha]", ">", "0"}], "&&", 
      RowBox[{"\[Epsilon]", "\[GreaterEqual]", "0"}]}], ",", 
     RowBox[{"Integrate", "[", 
      RowBox[{"po", ",", 
       RowBox[{"{", 
        RowBox[{"y", ",", 
         RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}]}], "]"}]}],
     "]"}], "//", "Simplify"}]}], "\[IndentingNewLine]", 
 RowBox[{"pix", "=", 
  RowBox[{
   RowBox[{"Assuming", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"\[Alpha]", ">", "0"}], "&&", 
      RowBox[{"\[Epsilon]", "\[GreaterEqual]", "0"}]}], ",", 
     RowBox[{"Integrate", "[", 
      RowBox[{"pi", ",", 
       RowBox[{"{", 
        RowBox[{"y", ",", 
         RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}]}], "]"}]}],
     "]"}], "//", "Simplify"}]}]}], "Input",
 CellChangeTimes->{{3.6700251930814457`*^9, 3.6700252042008524`*^9}, 
   3.6700271936079903`*^9, {3.6700306610936728`*^9, 3.6700306627047443`*^9}, {
   3.6700318619375505`*^9, 3.6700318629432197`*^9}, {3.6700320146242537`*^9, 
   3.670032036179613*^9}, {3.670090968392644*^9, 3.6700909696484804`*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "2"]}], " ", 
     SuperscriptBox["x", "2"], " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", 
   SqrtBox[
    RowBox[{"2", " ", "\[Pi]"}]]}], 
  SqrtBox[
   RowBox[{"\[Alpha]", " ", 
    RowBox[{"(", 
     RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]]]], "Output",
 CellChangeTimes->{3.670025322007324*^9, 3.670027299653627*^9, 
  3.6700276443572335`*^9, 3.670030773618625*^9, 3.6700320227436657`*^9, 
  3.6700320875078025`*^9, 3.6700773406812696`*^9, 3.670090955238884*^9, 
  3.670091029564391*^9}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "2"]}], " ", 
     SuperscriptBox["x", "2"], " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", 
   SqrtBox[
    FractionBox["\[Pi]", "2"]], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"2", " ", 
      RowBox[{"(", 
       RowBox[{
        SqrtBox[
         RowBox[{"\[Alpha]", " ", 
          RowBox[{"(", 
           RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], "+", 
        SqrtBox[
         RowBox[{
          SuperscriptBox["\[Alpha]", "3"], " ", 
          RowBox[{"(", 
           RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]]}], ")"}]}], "+", 
     RowBox[{
      SqrtBox[
       RowBox[{
        SuperscriptBox["\[Alpha]", "3"], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", "\[Epsilon]"}], "+", 
     RowBox[{
      SuperscriptBox["x", "2"], " ", 
      RowBox[{"(", 
       RowBox[{
        SqrtBox[
         RowBox[{"\[Alpha]", " ", 
          RowBox[{"(", 
           RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], "+", 
        RowBox[{"3", " ", 
         SqrtBox[
          RowBox[{
           SuperscriptBox["\[Alpha]", "3"], " ", 
           RowBox[{"(", 
            RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]]}], "+", 
        RowBox[{"2", " ", 
         SqrtBox[
          RowBox[{
           SuperscriptBox["\[Alpha]", "5"], " ", 
           RowBox[{"(", 
            RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]]}]}], ")"}], " ", 
      "\[Epsilon]"}]}], ")"}]}], 
  RowBox[{"\[Alpha]", " ", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"1", "+", "\[Alpha]"}], ")"}], "2"]}]]], "Output",
 CellChangeTimes->{3.670025322007324*^9, 3.670027299653627*^9, 
  3.6700276443572335`*^9, 3.670030773618625*^9, 3.6700320227436657`*^9, 
  3.6700320875078025`*^9, 3.6700773406812696`*^9, 3.670090955238884*^9, 
  3.670091130528643*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"pix", "/", "pox"}], "//", "Simplify"}], "\[IndentingNewLine]", 
 RowBox[{"1", "+", 
  FractionBox[
   RowBox[{"\[Epsilon]", 
    RowBox[{"(", 
     RowBox[{"a", "+", 
      RowBox[{
       SuperscriptBox["x", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"3", "a"}], "+", 
         RowBox[{"2", 
          SuperscriptBox["a", "2"]}]}], ")"}]}]}], ")"}]}], 
   RowBox[{"2", " ", 
    RowBox[{"(", 
     RowBox[{"1", "+", "a"}], ")"}]}]]}]}], "Input",
 CellChangeTimes->{{3.6700312834342117`*^9, 3.6700312870956507`*^9}, {
   3.67003148677966*^9, 3.6700314870298247`*^9}, 3.670031758407589*^9}],

Cell[BoxData[
 FractionBox[
  RowBox[{"\[Alpha]", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"2", " ", 
      RowBox[{"(", 
       RowBox[{
        SqrtBox[
         RowBox[{"\[Alpha]", " ", 
          RowBox[{"(", 
           RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], "+", 
        SqrtBox[
         RowBox[{
          SuperscriptBox["\[Alpha]", "3"], " ", 
          RowBox[{"(", 
           RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]]}], ")"}]}], "+", 
     RowBox[{
      SqrtBox[
       RowBox[{
        SuperscriptBox["\[Alpha]", "3"], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", "\[Epsilon]"}], "+", 
     RowBox[{
      SuperscriptBox["x", "2"], " ", 
      RowBox[{"(", 
       RowBox[{
        SqrtBox[
         RowBox[{"\[Alpha]", " ", 
          RowBox[{"(", 
           RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], "+", 
        RowBox[{"3", " ", 
         SqrtBox[
          RowBox[{
           SuperscriptBox["\[Alpha]", "3"], " ", 
           RowBox[{"(", 
            RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]]}], "+", 
        RowBox[{"2", " ", 
         SqrtBox[
          RowBox[{
           SuperscriptBox["\[Alpha]", "5"], " ", 
           RowBox[{"(", 
            RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]]}]}], ")"}], " ", 
      "\[Epsilon]"}]}], ")"}]}], 
  RowBox[{"2", " ", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"\[Alpha]", " ", 
      RowBox[{"(", 
       RowBox[{"1", "+", "\[Alpha]"}], ")"}]}], ")"}], 
    RowBox[{"3", "/", "2"}]]}]]], "Output",
 CellChangeTimes->{
  3.670077441775607*^9, {3.6700909439783816`*^9, 3.670090950001395*^9}, 
   3.670091131271137*^9}],

Cell[BoxData[
 RowBox[{"1", "+", 
  FractionBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"a", "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"3", " ", "a"}], "+", 
         RowBox[{"2", " ", 
          SuperscriptBox["a", "2"]}]}], ")"}], " ", 
       SuperscriptBox["x", "2"]}]}], ")"}], " ", "\[Epsilon]"}], 
   RowBox[{"2", " ", 
    RowBox[{"(", 
     RowBox[{"1", "+", "a"}], ")"}]}]]}]], "Output",
 CellChangeTimes->{
  3.670077441775607*^9, {3.6700909439783816`*^9, 3.670090950001395*^9}, 
   3.670091131287148*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Assuming", "[", 
   RowBox[{
    RowBox[{"\[Alpha]", ">", "0"}], ",", 
    RowBox[{"Integrate", "[", 
     RowBox[{
      RowBox[{
       SqrtBox[
        FractionBox[
         RowBox[{"\[Alpha]", "+", "1"}], 
         RowBox[{"2", "\[Pi]"}]]], 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{
         RowBox[{"-", 
          FractionBox["1", "2"]}], " ", 
         SuperscriptBox["x", "2"], " ", 
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], "x", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"aa", " ", 
          SuperscriptBox["x", "2"]}], "-", "1"}], ")"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "0", ",", "X"}], "}"}]}], "]"}]}], "]"}], "//", 
  "Simplify"}]], "Input",
 CellChangeTimes->{{3.6700279928133383`*^9, 3.6700280531875544`*^9}, {
  3.6700318345713215`*^9, 3.6700318423444986`*^9}, {3.670244381873929*^9, 
  3.6702444100847187`*^9}, {3.6702444798591957`*^9, 3.670244481086012*^9}, {
  3.6702445174162126`*^9, 3.6702445260609713`*^9}, {3.67024476115857*^9, 
  3.6702447877913094`*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["1", "2"]}], " ", 
        SuperscriptBox["X", "2"], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]]}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{"1", "+", "\[Alpha]"}], ")"}]}], "+", 
   RowBox[{"aa", " ", 
    RowBox[{"(", 
     RowBox[{"2", "-", 
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{
         RowBox[{"-", 
          FractionBox["1", "2"]}], " ", 
         SuperscriptBox["X", "2"], " ", 
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", 
       RowBox[{"(", 
        RowBox[{"2", "+", 
         RowBox[{
          SuperscriptBox["X", "2"], " ", 
          RowBox[{"(", 
           RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]}], ")"}]}]}], ")"}]}]}], 
  RowBox[{
   SqrtBox[
    RowBox[{"2", " ", "\[Pi]"}]], " ", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
    RowBox[{"3", "/", "2"}]]}]]], "Output",
 CellChangeTimes->{
  3.670028062781945*^9, 3.670031903813444*^9, 3.6700774514230347`*^9, 
   3.670244452739133*^9, 3.6702444873051567`*^9, {3.6702447823777018`*^9, 
   3.6702447933920393`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"poxint", "=", 
  RowBox[{
   RowBox[{"Assuming", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"\[Alpha]", ">", "0"}], "&&", 
      RowBox[{"\[Epsilon]", "\[GreaterEqual]", "0"}], "&&", 
      RowBox[{"X", ">", "0"}]}], ",", 
     RowBox[{"Integrate", "[", 
      RowBox[{"pox", ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "X", ",", "\[Infinity]"}], "}"}]}], "]"}]}], "]"}], 
   "//", "Simplify"}]}], "\[IndentingNewLine]", 
 RowBox[{"pixint", "=", 
  RowBox[{
   RowBox[{"Assuming", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"\[Alpha]", ">", "0"}], "&&", 
      RowBox[{"\[Epsilon]", "\[GreaterEqual]", "0"}], "&&", 
      RowBox[{"X", ">", "0"}]}], ",", 
     RowBox[{"Integrate", "[", 
      RowBox[{"pix", ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "0", ",", "X"}], "}"}]}], "]"}]}], "]"}], "//", 
   "Simplify"}]}]}], "Input",
 CellChangeTimes->{{3.670031949121624*^9, 3.6700319579334955`*^9}, {
   3.6700320636979437`*^9, 3.6700320656852655`*^9}, 3.670032844908304*^9, {
   3.6700328836611176`*^9, 3.670032885576393*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"\[Pi]", " ", 
   RowBox[{"Erfc", "[", 
    FractionBox[
     RowBox[{"X", " ", 
      SqrtBox[
       RowBox[{"1", "+", "\[Alpha]"}]]}], 
     SqrtBox["2"]], "]"}]}], 
  RowBox[{
   SqrtBox["\[Alpha]"], " ", 
   RowBox[{"(", 
    RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]]], "Output",
 CellChangeTimes->{{3.670032866044382*^9, 3.670032873612424*^9}, 
   3.6700774722909346`*^9, {3.6700781257482004`*^9, 3.670078144234514*^9}, 
   3.670091139075336*^9}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "2"]}], " ", 
     SuperscriptBox["X", "2"], " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"-", 
       SqrtBox[
        RowBox[{"2", " ", "\[Pi]"}]]}], " ", "X", " ", 
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"3", " ", "\[Alpha]"}], "+", 
        RowBox[{"2", " ", 
         SuperscriptBox["\[Alpha]", "2"]}]}], ")"}], " ", "\[Epsilon]"}], "+", 
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        FractionBox["1", "2"], " ", 
        SuperscriptBox["X", "2"], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", "\[Pi]", " ", 
      SqrtBox[
       RowBox[{"1", "+", "\[Alpha]"}]], " ", 
      RowBox[{"(", 
       RowBox[{"2", "+", "\[Epsilon]", "+", 
        RowBox[{"\[Alpha]", " ", 
         RowBox[{"(", 
          RowBox[{"2", "+", 
           RowBox[{"3", " ", "\[Epsilon]"}]}], ")"}]}]}], ")"}], " ", 
      RowBox[{"Erf", "[", 
       FractionBox[
        RowBox[{"X", " ", 
         SqrtBox[
          RowBox[{"1", "+", "\[Alpha]"}]]}], 
        SqrtBox["2"]], "]"}]}]}], ")"}]}], 
  RowBox[{"2", " ", 
   SqrtBox["\[Alpha]"], " ", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
    RowBox[{"5", "/", "2"}]]}]]], "Output",
 CellChangeTimes->{{3.670032866044382*^9, 3.670032873612424*^9}, 
   3.6700774722909346`*^9, {3.6700781257482004`*^9, 3.670078144234514*^9}, 
   3.6700911805829835`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 FractionBox[
  RowBox[{"\[Pi]", " ", 
   RowBox[{"Erfc", "[", 
    FractionBox[
     RowBox[{"X", " ", 
      SqrtBox[
       RowBox[{"1", "+", "\[Alpha]"}]]}], 
     SqrtBox["2"]], "]"}]}], 
  RowBox[{
   SqrtBox["\[Alpha]"], " ", 
   RowBox[{"(", 
    RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], "\[IndentingNewLine]", 
 RowBox[{
  FractionBox[
   RowBox[{"\[Pi]", "  ", 
    RowBox[{"Erf", "[", 
     FractionBox[
      RowBox[{"X", " ", 
       SqrtBox[
        RowBox[{"1", "+", "\[Alpha]"}]]}], 
      SqrtBox["2"]], "]"}]}], 
   RowBox[{
    SqrtBox["\[Alpha]"], " ", 
    RowBox[{"(", 
     RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], "+", 
  RowBox[{"\[Epsilon]", 
   RowBox[{"(", 
    RowBox[{
     FractionBox[
      RowBox[{" ", 
       RowBox[{
        RowBox[{"-", 
         SqrtBox[
          RowBox[{"2", " ", "\[Pi]"}]]}], " ", "X", " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"3", " ", "\[Alpha]"}], "+", 
          RowBox[{"2", " ", 
           SuperscriptBox["\[Alpha]", "2"]}]}], ")"}], 
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{
          RowBox[{"-", 
           FractionBox["1", "2"]}], " ", 
          SuperscriptBox["X", "2"], " ", 
          RowBox[{"(", 
           RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]]}]}], 
      RowBox[{"2", " ", 
       SqrtBox["\[Alpha]"], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
        RowBox[{"5", "/", "2"}]]}]], "+", 
     FractionBox[
      RowBox[{"\[Pi]", "  ", 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"3", "\[Alpha]"}]}], " ", ")"}], " ", 
       RowBox[{"Erf", "[", 
        FractionBox[
         RowBox[{"X", " ", 
          SqrtBox[
           RowBox[{"1", "+", "\[Alpha]"}]]}], 
         SqrtBox["2"]], "]"}]}], 
      RowBox[{"2", " ", 
       SqrtBox["\[Alpha]"], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}], "2"]}]]}], 
    ")"}]}]}]}], "Input",
 CellChangeTimes->{{3.670032786309271*^9, 3.670032786573449*^9}, {
  3.6700329232815094`*^9, 3.6700329793958864`*^9}, {3.6700330103715196`*^9, 
  3.6700330998701324`*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"\[Pi]", " ", 
   RowBox[{"Erfc", "[", 
    FractionBox[
     RowBox[{"X", " ", 
      SqrtBox[
       RowBox[{"1", "+", "\[Alpha]"}]]}], 
     SqrtBox["2"]], "]"}]}], 
  RowBox[{
   SqrtBox["\[Alpha]"], " ", 
   RowBox[{"(", 
    RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]]], "Output",
 CellChangeTimes->{3.6700775085700994`*^9}],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"\[Pi]", " ", 
    RowBox[{"Erf", "[", 
     FractionBox[
      RowBox[{"X", " ", 
       SqrtBox[
        RowBox[{"1", "+", "\[Alpha]"}]]}], 
      SqrtBox["2"]], "]"}]}], 
   RowBox[{
    SqrtBox["\[Alpha]"], " ", 
    RowBox[{"(", 
     RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], "+", 
  RowBox[{"\[Epsilon]", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", 
      FractionBox[
       RowBox[{
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{
          RowBox[{"-", 
           FractionBox["1", "2"]}], " ", 
          SuperscriptBox["X", "2"], " ", 
          RowBox[{"(", 
           RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", 
        SqrtBox[
         FractionBox["\[Pi]", "2"]], " ", "X", " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"3", " ", "\[Alpha]"}], "+", 
          RowBox[{"2", " ", 
           SuperscriptBox["\[Alpha]", "2"]}]}], ")"}]}], 
       RowBox[{
        SqrtBox["\[Alpha]"], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
         RowBox[{"5", "/", "2"}]]}]]}], "+", 
     FractionBox[
      RowBox[{"\[Pi]", " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"3", " ", "\[Alpha]"}]}], ")"}], " ", 
       RowBox[{"Erf", "[", 
        FractionBox[
         RowBox[{"X", " ", 
          SqrtBox[
           RowBox[{"1", "+", "\[Alpha]"}]]}], 
         SqrtBox["2"]], "]"}]}], 
      RowBox[{"2", " ", 
       SqrtBox["\[Alpha]"], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}], "2"]}]]}], 
    ")"}]}]}]], "Output",
 CellChangeTimes->{3.6700775085851088`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{"1", "+", 
     RowBox[{"\[Epsilon]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"Erfc", "[", 
          RowBox[{
           SqrtBox[
            FractionBox[
             RowBox[{"\[Alpha]", "+", "1"}], "2"]], "X"}], "]"}], 
         FractionBox["1", 
          RowBox[{"2", 
           RowBox[{"(", 
            RowBox[{"\[Alpha]", "+", "1"}], ")"}]}]], 
         RowBox[{"(", 
          RowBox[{"\[Alpha]", "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"1", "+", 
              RowBox[{"3", "\[Alpha]"}], "+", 
              RowBox[{"2", 
               SuperscriptBox["\[Alpha]", "2"]}]}], ")"}], 
            SuperscriptBox["X", "2"]}]}], ")"}]}], "+", 
        RowBox[{
         FractionBox[
          RowBox[{"1", "+", 
           RowBox[{"3", "\[Alpha]"}]}], 
          RowBox[{"4", 
           RowBox[{"(", 
            RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], 
         RowBox[{"Erf", "[", 
          RowBox[{
           SqrtBox[
            FractionBox[
             RowBox[{"\[Alpha]", "+", "1"}], "2"]], "X"}], "]"}]}], "-", 
        FractionBox[
         RowBox[{"X", 
          RowBox[{"(", 
           RowBox[{"1", "+", 
            RowBox[{"3", "\[Alpha]"}], "+", 
            RowBox[{"2", 
             SuperscriptBox["\[Alpha]", "2"]}]}], ")"}], 
          RowBox[{"Exp", "[", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["1", "2"]}], 
            RowBox[{"(", 
             RowBox[{"\[Alpha]", "+", "1"}], ")"}], 
            SuperscriptBox["X", "2"]}], "]"}]}], 
         RowBox[{"4", 
          SqrtBox[
           RowBox[{"\[Pi]", "/", "2"}]], 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
           RowBox[{"3", "/", "2"}]]}]]}], ")"}]}]}], ")"}], "-", 
   RowBox[{"(", 
    RowBox[{"1", "+", 
     RowBox[{"\[Epsilon]", " ", 
      FractionBox["1", 
       RowBox[{"2", 
        RowBox[{"(", 
         RowBox[{"\[Alpha]", "+", "1"}], ")"}]}]], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"1", "+", 
           RowBox[{"3", "\[Alpha]"}], "+", 
           RowBox[{"2", 
            SuperscriptBox["\[Alpha]", "2"]}]}], ")"}], 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            SuperscriptBox["X", "2"], 
            RowBox[{"Erfc", "[", 
             RowBox[{
              SqrtBox[
               FractionBox[
                RowBox[{"\[Alpha]", "+", "1"}], "2"]], "X"}], "]"}]}], "-", 
           RowBox[{
            SqrtBox[
             FractionBox["2", "\[Pi]"]], 
            FractionBox[
             RowBox[{"X", " ", 
              RowBox[{"Exp", "[", 
               RowBox[{
                RowBox[{"-", 
                 FractionBox["1", "2"]}], 
                RowBox[{"(", 
                 RowBox[{"\[Alpha]", "+", "1"}], ")"}], 
                SuperscriptBox["X", "2"]}], "]"}]}], 
             SqrtBox[
              RowBox[{"\[Alpha]", "+", "1"}]]]}]}], ")"}]}], "+", "\[Alpha]", 
        "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"1", "+", 
           RowBox[{"2", "\[Alpha]"}]}], ")"}], 
         RowBox[{"Erf", "[", 
          RowBox[{
           SqrtBox[
            FractionBox[
             RowBox[{"\[Alpha]", "+", "1"}], "2"]], "X"}], "]"}]}]}], 
       ")"}]}]}], ")"}]}], "//", "Simplify"}]], "Input",
 CellChangeTimes->{{3.67009416985913*^9, 3.670094189910487*^9}}],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "4"], " ", "\[Epsilon]", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", 
     RowBox[{"Erf", "[", 
      FractionBox[
       RowBox[{"X", " ", 
        SqrtBox[
         RowBox[{"1", "+", "\[Alpha]"}]]}], 
       SqrtBox["2"]], "]"}]}], "+", 
    FractionBox[
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["1", "2"]}], " ", 
        SuperscriptBox["X", "2"], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "2"}], " ", 
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{
           FractionBox["1", "2"], " ", 
           SuperscriptBox["X", "2"], " ", 
           RowBox[{"(", 
            RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", "\[Alpha]", " ", 
         SqrtBox[
          RowBox[{"1", "+", "\[Alpha]"}]]}], "+", 
        RowBox[{
         SqrtBox[
          FractionBox["2", "\[Pi]"]], " ", "X", " ", 
         RowBox[{"(", 
          RowBox[{"1", "+", 
           RowBox[{"3", " ", "\[Alpha]"}], "+", 
           RowBox[{"2", " ", 
            SuperscriptBox["\[Alpha]", "2"]}]}], ")"}]}], "+", 
        RowBox[{"2", " ", 
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{
           FractionBox["1", "2"], " ", 
           SuperscriptBox["X", "2"], " ", 
           RowBox[{"(", 
            RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", "\[Alpha]", " ", 
         SqrtBox[
          RowBox[{"1", "+", "\[Alpha]"}]], " ", 
         RowBox[{"Erfc", "[", 
          FractionBox[
           RowBox[{"X", " ", 
            SqrtBox[
             RowBox[{"1", "+", "\[Alpha]"}]]}], 
           SqrtBox["2"]], "]"}]}]}], ")"}]}], 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
      RowBox[{"3", "/", "2"}]]]}], ")"}]}]], "Output",
 CellChangeTimes->{{3.670094178171668*^9, 3.670094193001546*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"B", "=", 
     RowBox[{"1", "/", 
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"\[Epsilon]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Erfc", "[", 
             RowBox[{
              SqrtBox[
               FractionBox[
                RowBox[{"\[Alpha]", "+", "1"}], "2"]], "X"}], "]"}], 
            FractionBox["1", 
             RowBox[{"2", 
              RowBox[{"(", 
               RowBox[{"\[Alpha]", "+", "1"}], ")"}]}]], 
            RowBox[{"(", 
             RowBox[{"\[Alpha]", "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "+", 
                 RowBox[{"3", "\[Alpha]"}], "+", 
                 RowBox[{"2", 
                  SuperscriptBox["\[Alpha]", "2"]}]}], ")"}], 
               SuperscriptBox["X", "2"]}]}], ")"}]}], "+", 
           RowBox[{
            FractionBox[
             RowBox[{"1", "+", 
              RowBox[{"3", "\[Alpha]"}]}], 
             RowBox[{"4", 
              RowBox[{"(", 
               RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], 
            RowBox[{"Erf", "[", 
             RowBox[{
              SqrtBox[
               FractionBox[
                RowBox[{"\[Alpha]", "+", "1"}], "2"]], "X"}], "]"}]}], "-", 
           FractionBox[
            RowBox[{"X", 
             RowBox[{"(", 
              RowBox[{"1", "+", 
               RowBox[{"3", "\[Alpha]"}], "+", 
               RowBox[{"2", 
                SuperscriptBox["\[Alpha]", "2"]}]}], ")"}], 
             RowBox[{"Exp", "[", 
              RowBox[{
               RowBox[{"-", 
                FractionBox["1", "2"]}], 
               RowBox[{"(", 
                RowBox[{"\[Alpha]", "+", "1"}], ")"}], 
               SuperscriptBox["X", "2"]}], "]"}]}], 
            RowBox[{"4", 
             SqrtBox[
              RowBox[{"\[Pi]", "/", "2"}]], 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
              RowBox[{"3", "/", "2"}]]}]]}], ")"}]}]}], ")"}]}]}], ";"}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"B", "=", 
     RowBox[{"1", "/", 
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"\[Epsilon]", " ", 
         FractionBox["1", 
          RowBox[{"2", 
           RowBox[{"(", 
            RowBox[{"\[Alpha]", "+", "1"}], ")"}]}]], 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"1", "+", 
              RowBox[{"3", "\[Alpha]"}], "+", 
              RowBox[{"2", 
               SuperscriptBox["\[Alpha]", "2"]}]}], ")"}], 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               SuperscriptBox["X", "2"], 
               RowBox[{"Erfc", "[", 
                RowBox[{
                 SqrtBox[
                  FractionBox[
                   RowBox[{"\[Alpha]", "+", "1"}], "2"]], "X"}], "]"}]}], "-", 
              RowBox[{
               SqrtBox[
                FractionBox["2", "\[Pi]"]], 
               FractionBox[
                RowBox[{"X", " ", 
                 RowBox[{"Exp", "[", 
                  RowBox[{
                   RowBox[{"-", 
                    FractionBox["1", "2"]}], 
                   RowBox[{"(", 
                    RowBox[{"\[Alpha]", "+", "1"}], ")"}], 
                   SuperscriptBox["X", "2"]}], "]"}]}], 
                SqrtBox[
                 RowBox[{"\[Alpha]", "+", "1"}]]]}]}], ")"}]}], "+", 
           "\[Alpha]", "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"1", "+", 
              RowBox[{"2", "\[Alpha]"}]}], ")"}], 
            RowBox[{"Erf", "[", 
             RowBox[{
              SqrtBox[
               FractionBox[
                RowBox[{"\[Alpha]", "+", "1"}], "2"]], "X"}], "]"}]}]}], 
          ")"}]}]}], ")"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"A", "=", 
     RowBox[{"B", 
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"\[Epsilon]", " ", 
         FractionBox["1", 
          RowBox[{"2", 
           RowBox[{"(", 
            RowBox[{"\[Alpha]", "+", "1"}], ")"}]}]], 
         RowBox[{"(", 
          RowBox[{"\[Alpha]", "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"1", "+", 
              RowBox[{"3", "\[Alpha]"}], "+", 
              RowBox[{"2", 
               SuperscriptBox["\[Alpha]", "2"]}]}], ")"}], 
            SuperscriptBox["X", "2"]}]}], ")"}]}]}], ")"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"pout", "=", 
     RowBox[{"A", 
      SqrtBox[
       FractionBox[
        RowBox[{"\[Alpha]", "+", "1"}], 
        RowBox[{"2", "\[Pi]"}]]], 
      RowBox[{"Exp", "[", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["1", "2"]}], 
        RowBox[{"(", 
         RowBox[{"\[Alpha]", "+", "1"}], ")"}], 
        SuperscriptBox["x", "2"]}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"pin", "=", 
     RowBox[{"B", 
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"\[Epsilon]", " ", 
         FractionBox["1", 
          RowBox[{"2", 
           RowBox[{"(", 
            RowBox[{"\[Alpha]", "+", "1"}], ")"}]}]], 
         RowBox[{"(", 
          RowBox[{"\[Alpha]", "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"1", "+", 
              RowBox[{"3", "\[Alpha]"}], "+", 
              RowBox[{"2", 
               SuperscriptBox["\[Alpha]", "2"]}]}], ")"}], 
            SuperscriptBox["x", "2"]}]}], ")"}]}]}], ")"}], 
      SqrtBox[
       FractionBox[
        RowBox[{"\[Alpha]", "+", "1"}], 
        RowBox[{"2", "\[Pi]"}]]], 
      RowBox[{"Exp", "[", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["1", "2"]}], 
        RowBox[{"(", 
         RowBox[{"\[Alpha]", "+", "1"}], ")"}], 
        SuperscriptBox["x", "2"]}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Plot", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Piecewise", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"pout", ",", 
              RowBox[{"x", ">", "X"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"pin", ",", 
              RowBox[{"x", "<", "X"}]}], "}"}]}], "}"}], "]"}], "/.", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\[Alpha]", "\[Rule]", "1"}], ",", 
           RowBox[{"\[Epsilon]", "\[Rule]", "\[Epsilon]\[Epsilon]"}], ",", 
           RowBox[{"X", "\[Rule]", "XX"}]}], "}"}]}], "//", "Evaluate"}], ",",
        "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"x", ",", "0", ",", "4"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
       RowBox[{"Exclusions", "\[Rule]", "None"}], ",", "\[IndentingNewLine]", 
       RowBox[{"AxesLabel", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<x\>\"", ",", "\"\<p(x)\>\""}], "}"}]}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\[Epsilon]\[Epsilon]", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"XX", ",", "0", ",", "1"}], "}"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.6700298040918255`*^9, 3.670030420257251*^9}, {
   3.670030565045695*^9, 3.6700306080373306`*^9}, {3.670031194765148*^9, 
   3.670031222419568*^9}, {3.670031583522098*^9, 3.6700316121431627`*^9}, {
   3.6700316541471424`*^9, 3.6700317103505793`*^9}, 3.6700317670203257`*^9, {
   3.6700337633650846`*^9, 3.6700337770802193`*^9}, {3.6700338338310213`*^9, 
   3.6700340336731367`*^9}, {3.6700340721237483`*^9, 3.670034102149749*^9}, {
   3.670092110058104*^9, 3.6700921105684433`*^9}, {3.6700927447608767`*^9, 
   3.670092936211403*^9}, {3.670093001921171*^9, 3.6700930053694677`*^9}, {
   3.670093256037438*^9, 3.6700932585771284`*^9}, 3.67009328927958*^9, {
   3.670093324427991*^9, 3.670093358351588*^9}, {3.670093577297429*^9, 
   3.670093593077939*^9}, 3.6700938096371884`*^9, {3.6700938669143405`*^9, 
   3.6700938683102703`*^9}, {3.670093901933667*^9, 3.670093946015029*^9}, 
   3.6700940051694317`*^9, {3.6700941192494187`*^9, 3.6700941436957035`*^9}, {
   3.67009420357759*^9, 3.670094207635292*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{Parallel`Concurrency`Private`XX$$ = 0.386, 
    Parallel`Concurrency`Private`\[Epsilon]\[Epsilon]$$ = 1., Typeset`show$$ =
     True, Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[Parallel`Concurrency`Private`\[Epsilon]\[Epsilon]$$], 0, 1}, {
      Hold[Parallel`Concurrency`Private`XX$$], 0, 1}}, Typeset`size$$ = {
    360., {114., 118.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, 
    Parallel`Concurrency`Private`\[Epsilon]\[Epsilon]$53665$$ = 0, 
    Parallel`Concurrency`Private`XX$53666$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {
       Parallel`Concurrency`Private`XX$$ = 0, 
        Parallel`Concurrency`Private`\[Epsilon]\[Epsilon]$$ = 0}, 
      "ControllerVariables" :> {
        Hold[
        Parallel`Concurrency`Private`\[Epsilon]\[Epsilon]$$, 
         Parallel`Concurrency`Private`\[Epsilon]\[Epsilon]$53665$$, 0], 
        Hold[
        Parallel`Concurrency`Private`XX$$, 
         Parallel`Concurrency`Private`XX$53666$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Plot[
        Evaluate[
         ReplaceAll[
          
          Piecewise[{{
            Parallel`Concurrency`Private`pout, Parallel`Concurrency`Private`x > 
             Parallel`Concurrency`Private`X}, {
            Parallel`Concurrency`Private`pin, Parallel`Concurrency`Private`x < 
             Parallel`Concurrency`Private`X}}], {
          Parallel`Concurrency`Private`\[Alpha] -> 1, 
           Parallel`Concurrency`Private`\[Epsilon] -> 
           Parallel`Concurrency`Private`\[Epsilon]\[Epsilon]$$, 
           Parallel`Concurrency`Private`X -> 
           Parallel`Concurrency`Private`XX$$}]], {
        Parallel`Concurrency`Private`x, 0, 4}, PlotRange -> All, Exclusions -> N\
one, AxesLabel -> {"x", "p(x)"}], 
      "Specifications" :> {{
        Parallel`Concurrency`Private`\[Epsilon]\[Epsilon]$$, 0, 1}, {
        Parallel`Concurrency`Private`XX$$, 0, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{411., {173., 180.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.670030280939452*^9, {3.670030323264645*^9, 3.670030364726263*^9}, {
   3.6700303956828833`*^9, 3.670030423150179*^9}, {3.670030566061371*^9, 
   3.6700306093602133`*^9}, {3.670031196713447*^9, 3.6700312248451853`*^9}, 
   3.6700316552408705`*^9, 3.670031768393241*^9, {3.67003402614112*^9, 
   3.670034034963997*^9}, 3.670034107633401*^9, 3.670077510892645*^9, 
   3.6700911807961254`*^9, 3.670092112690858*^9, {3.6700929139695873`*^9, 
   3.6700929404592314`*^9}, {3.6700932652185535`*^9, 3.670093292649826*^9}, {
   3.670093325018386*^9, 3.6700933597455177`*^9}, 3.6700935983904777`*^9, 
   3.670093811175213*^9, 3.670093869585119*^9, {3.6700939081277924`*^9, 
   3.67009394865879*^9}, 3.6700940055596905`*^9, 3.6700941448995056`*^9, 
   3.670094359758622*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Pressure", "Subsubsection",
 CellChangeTimes->{{3.670096852873278*^9, 3.6700968546024294`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"P", "=", 
  RowBox[{
   RowBox[{"Assuming", "[", 
    RowBox[{
     RowBox[{"\[Alpha]", ">", "0"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"A", 
       SqrtBox[
        FractionBox[
         RowBox[{"\[Alpha]", "+", "1"}], 
         RowBox[{"2", "\[Pi]"}]]], 
       RowBox[{"Integrate", "[", 
        RowBox[{
         RowBox[{"x", " ", 
          RowBox[{"Exp", "[", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["1", "2"]}], 
            RowBox[{"(", 
             RowBox[{"\[Alpha]", "+", "1"}], ")"}], " ", 
            SuperscriptBox["x", "2"]}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"x", ",", "X", ",", "\[Infinity]"}], "}"}]}], "]"}]}], "+", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"+", "B"}], 
       SqrtBox[
        FractionBox[
         RowBox[{"\[Alpha]", "+", "1"}], 
         RowBox[{"2", "\[Pi]"}]]], 
       RowBox[{"(", 
        RowBox[{"1", "-", "\[Epsilon]"}], ")"}], 
       RowBox[{"Integrate", "[", 
        RowBox[{
         RowBox[{"x", " ", 
          RowBox[{"Exp", "[", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["1", "2"]}], 
            RowBox[{"(", 
             RowBox[{"\[Alpha]", "+", "1"}], ")"}], " ", 
            SuperscriptBox["x", "2"]}], "]"}], 
          RowBox[{"(", 
           RowBox[{"1", "+", 
            RowBox[{"\[Epsilon]", " ", 
             FractionBox[
              RowBox[{"\[Alpha]", "+", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"1", "+", 
                  RowBox[{"3", "\[Alpha]"}], "+", 
                  RowBox[{"2", 
                   SuperscriptBox["\[Alpha]", "2"]}]}], ")"}], 
                SuperscriptBox["x", "2"]}]}], 
              RowBox[{"2", 
               RowBox[{"(", 
                RowBox[{"\[Alpha]", "+", "1"}], ")"}]}]]}]}], ")"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"x", ",", "0", ",", "X"}], "}"}]}], "]"}]}]}]}], 
    "\[IndentingNewLine]", "]"}], "//", "Simplify"}]}]], "Input",
 CellChangeTimes->{{3.6700970600312653`*^9, 3.670097083807102*^9}, {
   3.670097129818751*^9, 3.6700971384735155`*^9}, {3.6700974140400686`*^9, 
   3.670097495965639*^9}, {3.670097574350851*^9, 3.670097583978265*^9}, {
   3.6700978840391345`*^9, 3.6700979060227776`*^9}, 3.670099346424225*^9, {
   3.670099672029108*^9, 3.6700997986044207`*^9}, 3.6701003362625513`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     RowBox[{"-", 
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        FractionBox["1", "2"], " ", 
        SuperscriptBox["X", "2"], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]]}], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "\[Epsilon]"}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{"2", "+", 
       RowBox[{"2", " ", "\[Alpha]"}], "+", 
       RowBox[{"2", " ", "\[Epsilon]"}], "+", 
       RowBox[{"5", " ", "\[Alpha]", " ", "\[Epsilon]"}]}], ")"}]}], "+", 
    RowBox[{"\[Epsilon]", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"2", "+", 
          SuperscriptBox["X", "2"]}], ")"}], " ", "\[Epsilon]"}], "+", 
       RowBox[{"2", " ", 
        SuperscriptBox["X", "2"], " ", 
        SuperscriptBox["\[Alpha]", "2"], " ", "\[Epsilon]"}], "+", 
       RowBox[{"\[Alpha]", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "2"}], "+", 
          RowBox[{"5", " ", "\[Epsilon]"}], "+", 
          RowBox[{"3", " ", 
           SuperscriptBox["X", "2"], " ", "\[Epsilon]"}]}], ")"}]}]}], 
      ")"}]}]}], ")"}], "/", 
  RowBox[{"(", 
   RowBox[{
    SqrtBox[
     RowBox[{"2", " ", "\[Pi]"}]], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"2", " ", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{
         FractionBox["1", "2"], " ", 
         SuperscriptBox["X", "2"], " ", 
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", 
       SqrtBox[
        RowBox[{"1", "+", "\[Alpha]"}]]}], "+", 
      RowBox[{"2", " ", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{
         FractionBox["1", "2"], " ", 
         SuperscriptBox["X", "2"], " ", 
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", "\[Alpha]", " ", 
       SqrtBox[
        RowBox[{"1", "+", "\[Alpha]"}]]}], "-", 
      RowBox[{
       SqrtBox[
        FractionBox["2", "\[Pi]"]], " ", "X", " ", "\[Epsilon]"}], "-", 
      RowBox[{"3", " ", 
       SqrtBox[
        FractionBox["2", "\[Pi]"]], " ", "X", " ", "\[Alpha]", " ", 
       "\[Epsilon]"}], "-", 
      RowBox[{"2", " ", 
       SqrtBox[
        FractionBox["2", "\[Pi]"]], " ", "X", " ", 
       SuperscriptBox["\[Alpha]", "2"], " ", "\[Epsilon]"}], "+", 
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{
         FractionBox["1", "2"], " ", 
         SuperscriptBox["X", "2"], " ", 
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", "\[Alpha]", " ", 
       SqrtBox[
        RowBox[{"1", "+", "\[Alpha]"}]], " ", "\[Epsilon]"}], "+", 
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{
         FractionBox["1", "2"], " ", 
         SuperscriptBox["X", "2"], " ", 
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", 
       SqrtBox[
        RowBox[{"1", "+", "\[Alpha]"}]], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "\[Alpha]"}]}], ")"}], " ", "\[Epsilon]", " ", 
       RowBox[{"Erf", "[", 
        FractionBox[
         RowBox[{"X", " ", 
          SqrtBox[
           RowBox[{"1", "+", "\[Alpha]"}]]}], 
         SqrtBox["2"]], "]"}]}], "+", 
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{
         FractionBox["1", "2"], " ", 
         SuperscriptBox["X", "2"], " ", 
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", 
       SuperscriptBox["X", "2"], " ", 
       SqrtBox[
        RowBox[{"1", "+", "\[Alpha]"}]], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"3", " ", "\[Alpha]"}], "+", 
         RowBox[{"2", " ", 
          SuperscriptBox["\[Alpha]", "2"]}]}], ")"}], " ", "\[Epsilon]", " ", 
       RowBox[{"Erfc", "[", 
        FractionBox[
         RowBox[{"X", " ", 
          SqrtBox[
           RowBox[{"1", "+", "\[Alpha]"}]]}], 
         SqrtBox["2"]], "]"}]}]}], ")"}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.6700975880379677`*^9, 3.670099351001273*^9, 
  3.670099826030689*^9, 3.6701003598292503`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Collect", "[", 
  RowBox[{
   RowBox[{"Numerator", "[", "P", "]"}], ",", "\[Epsilon]"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Collect", "[", 
  RowBox[{
   RowBox[{"Denominator", "[", "P", "]"}], ",", "\[Epsilon]"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.6701066701519623`*^9, 3.6701067076369314`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"2", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     FractionBox["1", "2"], " ", 
     SuperscriptBox["X", "2"], " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]]}], "+", 
  RowBox[{"2", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     FractionBox["1", "2"], " ", 
     SuperscriptBox["X", "2"], " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", "\[Alpha]"}], "+", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "2"}], " ", "\[Alpha]"}], "+", 
     RowBox[{"3", " ", 
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        FractionBox["1", "2"], " ", 
        SuperscriptBox["X", "2"], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", "\[Alpha]"}]}], ")"}],
    " ", "\[Epsilon]"}], "+", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"2", "-", 
     RowBox[{"2", " ", 
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        FractionBox["1", "2"], " ", 
        SuperscriptBox["X", "2"], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]]}], "+", 
     SuperscriptBox["X", "2"], "+", 
     RowBox[{"5", " ", "\[Alpha]"}], "-", 
     RowBox[{"5", " ", 
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        FractionBox["1", "2"], " ", 
        SuperscriptBox["X", "2"], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", "\[Alpha]"}], "+", 
     RowBox[{"3", " ", 
      SuperscriptBox["X", "2"], " ", "\[Alpha]"}], "+", 
     RowBox[{"2", " ", 
      SuperscriptBox["X", "2"], " ", 
      SuperscriptBox["\[Alpha]", "2"]}]}], ")"}], " ", 
   SuperscriptBox["\[Epsilon]", "2"]}]}]], "Output",
 CellChangeTimes->{{3.670106681220334*^9, 3.6701067081742897`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SqrtBox[
    RowBox[{"2", " ", "\[Pi]"}]], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"2", " ", 
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        FractionBox["1", "2"], " ", 
        SuperscriptBox["X", "2"], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", 
      SqrtBox[
       RowBox[{"1", "+", "\[Alpha]"}]]}], "+", 
     RowBox[{"2", " ", 
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        FractionBox["1", "2"], " ", 
        SuperscriptBox["X", "2"], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", "\[Alpha]", " ", 
      SqrtBox[
       RowBox[{"1", "+", "\[Alpha]"}]]}]}], ")"}]}], "+", 
  RowBox[{
   SqrtBox[
    RowBox[{"2", " ", "\[Pi]"}]], " ", "\[Epsilon]", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"-", 
       SqrtBox[
        FractionBox["2", "\[Pi]"]]}], " ", "X"}], "-", 
     RowBox[{"3", " ", 
      SqrtBox[
       FractionBox["2", "\[Pi]"]], " ", "X", " ", "\[Alpha]"}], "-", 
     RowBox[{"2", " ", 
      SqrtBox[
       FractionBox["2", "\[Pi]"]], " ", "X", " ", 
      SuperscriptBox["\[Alpha]", "2"]}], "+", 
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        FractionBox["1", "2"], " ", 
        SuperscriptBox["X", "2"], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", "\[Alpha]", " ", 
      SqrtBox[
       RowBox[{"1", "+", "\[Alpha]"}]]}], "+", 
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        FractionBox["1", "2"], " ", 
        SuperscriptBox["X", "2"], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", 
      SqrtBox[
       RowBox[{"1", "+", "\[Alpha]"}]], " ", 
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"2", " ", "\[Alpha]"}]}], ")"}], " ", 
      RowBox[{"Erf", "[", 
       FractionBox[
        RowBox[{"X", " ", 
         SqrtBox[
          RowBox[{"1", "+", "\[Alpha]"}]]}], 
        SqrtBox["2"]], "]"}]}], "+", 
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        FractionBox["1", "2"], " ", 
        SuperscriptBox["X", "2"], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", 
      SuperscriptBox["X", "2"], " ", 
      SqrtBox[
       RowBox[{"1", "+", "\[Alpha]"}]], " ", 
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"3", " ", "\[Alpha]"}], "+", 
        RowBox[{"2", " ", 
         SuperscriptBox["\[Alpha]", "2"]}]}], ")"}], " ", 
      RowBox[{"Erfc", "[", 
       FractionBox[
        RowBox[{"X", " ", 
         SqrtBox[
          RowBox[{"1", "+", "\[Alpha]"}]]}], 
        SqrtBox["2"]], "]"}]}]}], ")"}]}]}]], "Output",
 CellChangeTimes->{{3.670106681220334*^9, 3.670106708210313*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"A", ",", "B"}], "}"}], "/.", 
       RowBox[{"X", "\[Rule]", "XX"}]}], "/.", 
      RowBox[{"\[Alpha]", "\[Rule]", "\[Alpha]\[Alpha]"}]}], "/.", 
     RowBox[{"\[Epsilon]", "\[Rule]", "\[Epsilon]\[Epsilon]"}]}], "//", 
    "Evaluate"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"\[Alpha]\[Alpha]", ",", "0", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Epsilon]\[Epsilon]", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"XX", ",", "0", ",", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.670100198069502*^9, 3.6701002119047174`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{Parallel`Concurrency`Private`XX$$ = 0.6, 
    Parallel`Concurrency`Private`\[Alpha]\[Alpha]$$ = 0., 
    Parallel`Concurrency`Private`\[Epsilon]\[Epsilon]$$ = 0.164, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[Parallel`Concurrency`Private`\[Alpha]\[Alpha]$$], 0, 5}, {
      Hold[Parallel`Concurrency`Private`\[Epsilon]\[Epsilon]$$], 0, 1}, {
      Hold[Parallel`Concurrency`Private`XX$$], 0, 2}}, Typeset`size$$ = {
    149., {2., 8.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, 
    Parallel`Concurrency`Private`\[Alpha]\[Alpha]$77779$$ = 0, 
    Parallel`Concurrency`Private`\[Epsilon]\[Epsilon]$77780$$ = 0, 
    Parallel`Concurrency`Private`XX$77781$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {
       Parallel`Concurrency`Private`XX$$ = 0, 
        Parallel`Concurrency`Private`\[Alpha]\[Alpha]$$ = 0, 
        Parallel`Concurrency`Private`\[Epsilon]\[Epsilon]$$ = 0}, 
      "ControllerVariables" :> {
        Hold[
        Parallel`Concurrency`Private`\[Alpha]\[Alpha]$$, 
         Parallel`Concurrency`Private`\[Alpha]\[Alpha]$77779$$, 0], 
        Hold[
        Parallel`Concurrency`Private`\[Epsilon]\[Epsilon]$$, 
         Parallel`Concurrency`Private`\[Epsilon]\[Epsilon]$77780$$, 0], 
        Hold[
        Parallel`Concurrency`Private`XX$$, 
         Parallel`Concurrency`Private`XX$77781$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> {(
         1 + ((Rational[1, 2]/(1 + 
            Parallel`Concurrency`Private`\[Alpha]\[Alpha]$$)) (
            Parallel`Concurrency`Private`\[Alpha]\[Alpha]$$ + 
            Parallel`Concurrency`Private`XX$$^2 (1 + 
              3 Parallel`Concurrency`Private`\[Alpha]\[Alpha]$$ + 
              2 Parallel`Concurrency`Private`\[Alpha]\[Alpha]$$^2))) 
          Parallel`Concurrency`Private`\[Epsilon]\[Epsilon]$$)/(
        1 + ((Rational[1, 2]/(1 + 
           Parallel`Concurrency`Private`\[Alpha]\[Alpha]$$)) 
          Parallel`Concurrency`Private`\[Epsilon]\[Epsilon]$$) (
          Parallel`Concurrency`Private`\[Alpha]\[Alpha]$$ + (1 + 
            2 Parallel`Concurrency`Private`\[Alpha]\[Alpha]$$) 
           Erf[(2^Rational[-1, 2] 
              Parallel`Concurrency`Private`XX$$) (1 + 
               Parallel`Concurrency`Private`\[Alpha]\[Alpha]$$)^
              Rational[1, 2]] + (1 + 
            3 Parallel`Concurrency`Private`\[Alpha]\[Alpha]$$ + 
            2 Parallel`Concurrency`Private`\[Alpha]\[Alpha]$$^2) ((((-
                E^((Rational[-1, 2] Parallel`Concurrency`Private`XX$$^2) (1 + 
                   Parallel`Concurrency`Private`\[Alpha]\[Alpha]$$))) (2/Pi)^
                Rational[1, 2]) 
              Parallel`Concurrency`Private`XX$$) (1 + 
               Parallel`Concurrency`Private`\[Alpha]\[Alpha]$$)^
              Rational[-1, 2] + 
            Parallel`Concurrency`Private`XX$$^2 
             Erfc[(2^Rational[-1, 2] 
                Parallel`Concurrency`Private`XX$$) (1 + 
                 Parallel`Concurrency`Private`\[Alpha]\[Alpha]$$)^
                Rational[1, 2]]))), (
         1 + ((Rational[1, 2]/(1 + 
            Parallel`Concurrency`Private`\[Alpha]\[Alpha]$$)) 
           Parallel`Concurrency`Private`\[Epsilon]\[Epsilon]$$) (
           Parallel`Concurrency`Private`\[Alpha]\[Alpha]$$ + (1 + 
             2 Parallel`Concurrency`Private`\[Alpha]\[Alpha]$$) 
            Erf[(2^Rational[-1, 2] 
               Parallel`Concurrency`Private`XX$$) (1 + 
                Parallel`Concurrency`Private`\[Alpha]\[Alpha]$$)^
               Rational[1, 2]] + (1 + 
             3 Parallel`Concurrency`Private`\[Alpha]\[Alpha]$$ + 
             2 Parallel`Concurrency`Private`\[Alpha]\[Alpha]$$^2) ((((-
                 E^((Rational[-1, 2] Parallel`Concurrency`Private`XX$$^2) (1 + 
                    Parallel`Concurrency`Private`\[Alpha]\[Alpha]$$))) (2/Pi)^
                 Rational[1, 2]) 
               Parallel`Concurrency`Private`XX$$) (1 + 
                Parallel`Concurrency`Private`\[Alpha]\[Alpha]$$)^
               Rational[-1, 2] + 
             Parallel`Concurrency`Private`XX$$^2 
              Erfc[(2^Rational[-1, 2] 
                 Parallel`Concurrency`Private`XX$$) (1 + 
                  Parallel`Concurrency`Private`\[Alpha]\[Alpha]$$)^
                 Rational[1, 2]])))^(-1)}, 
      "Specifications" :> {{
        Parallel`Concurrency`Private`\[Alpha]\[Alpha]$$, 0, 5}, {
        Parallel`Concurrency`Private`\[Epsilon]\[Epsilon]$$, 0, 1}, {
        Parallel`Concurrency`Private`XX$$, 0, 2}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{410., {78., 85.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.6701002149437428`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"P", ",", 
           FractionBox["1", 
            SqrtBox[
             RowBox[{"2", "\[Pi]", 
              RowBox[{"(", 
               RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]]]}], "}"}], "/.", 
         RowBox[{"X", "\[Rule]", "XX"}]}], "/.", 
        RowBox[{"\[Alpha]", "\[Rule]", "\[Alpha]\[Alpha]"}]}], "/.", 
       RowBox[{"\[Epsilon]", "\[Rule]", "\[Epsilon]\[Epsilon]"}]}], "//", 
      "Evaluate"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\[Alpha]\[Alpha]", ",", "0", ",", "5"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"All", ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "0.5"}], "}"}]}], "}"}]}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"\[Epsilon]\[Epsilon]", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"XX", ",", "0", ",", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.670097462437307*^9, 3.6700974638682604`*^9}, {
  3.670097507435279*^9, 3.670097562464935*^9}, {3.6700976075339556`*^9, 
  3.6700978104541187`*^9}, {3.6700998781594105`*^9, 3.6700998934766145`*^9}, {
  3.670100386092744*^9, 3.6701003867681932`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{Parallel`Concurrency`Private`XX$$ = 0.305, 
    Parallel`Concurrency`Private`\[Epsilon]\[Epsilon]$$ = 0.164, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[Parallel`Concurrency`Private`\[Epsilon]\[Epsilon]$$], 0, 1}, {
      Hold[Parallel`Concurrency`Private`XX$$], 0, 2}}, Typeset`size$$ = {
    360., {117., 121.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, 
    Parallel`Concurrency`Private`\[Epsilon]\[Epsilon]$84035$$ = 0, 
    Parallel`Concurrency`Private`XX$84036$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {
       Parallel`Concurrency`Private`XX$$ = 0, 
        Parallel`Concurrency`Private`\[Epsilon]\[Epsilon]$$ = 0}, 
      "ControllerVariables" :> {
        Hold[
        Parallel`Concurrency`Private`\[Epsilon]\[Epsilon]$$, 
         Parallel`Concurrency`Private`\[Epsilon]\[Epsilon]$84035$$, 0], 
        Hold[
        Parallel`Concurrency`Private`XX$$, 
         Parallel`Concurrency`Private`XX$84036$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Plot[
        Evaluate[
         ReplaceAll[
          ReplaceAll[
           
           ReplaceAll[{
            Parallel`Concurrency`Private`P, 
             1/((2 Pi) (1 + Parallel`Concurrency`Private`\[Alpha]))^
             Rational[1, 2]}, Parallel`Concurrency`Private`X -> 
            Parallel`Concurrency`Private`XX$$], 
           Parallel`Concurrency`Private`\[Alpha] -> 
           Parallel`Concurrency`Private`\[Alpha]\[Alpha]], 
          Parallel`Concurrency`Private`\[Epsilon] -> 
          Parallel`Concurrency`Private`\[Epsilon]\[Epsilon]$$]], {
        Parallel`Concurrency`Private`\[Alpha]\[Alpha], 0, 5}, GridLines -> 
        Automatic, PlotRange -> {All, {0, 0.5}}], 
      "Specifications" :> {{
        Parallel`Concurrency`Private`\[Epsilon]\[Epsilon]$$, 0, 1}, {
        Parallel`Concurrency`Private`XX$$, 0, 2}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{411., {176., 183.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.6700975700649986`*^9, 3.670097635708722*^9}, 
   3.670097684461196*^9, {3.670097728851765*^9, 3.6700977713590784`*^9}, 
   3.6700978112536516`*^9, 3.670099846151091*^9, 3.670099895478948*^9, {
   3.670100360082419*^9, 3.6701003873886075`*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.670161709645305*^9, 3.670161709800408*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"3", "\[Alpha]"}], "+", 
        RowBox[{"2", 
         SuperscriptBox["\[Alpha]", "2"]}]}], ")"}], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         SuperscriptBox["X", "2"], 
         RowBox[{"Erfc", "[", 
          RowBox[{
           SqrtBox[
            FractionBox[
             RowBox[{"\[Alpha]", "+", "1"}], "2"]], "X"}], "]"}]}], "-", 
        RowBox[{
         SqrtBox[
          FractionBox["2", "\[Pi]"]], 
         FractionBox[
          RowBox[{"X", " ", 
           RowBox[{"Exp", "[", 
            RowBox[{
             RowBox[{"-", 
              FractionBox["1", "2"]}], 
             RowBox[{"(", 
              RowBox[{"\[Alpha]", "+", "1"}], ")"}], 
             SuperscriptBox["X", "2"]}], "]"}]}], 
          SqrtBox[
           RowBox[{"\[Alpha]", "+", "1"}]]]}]}], ")"}]}], "+", "\[Alpha]", 
     "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"2", "\[Alpha]"}]}], ")"}], 
      RowBox[{"Erf", "[", 
       RowBox[{
        SqrtBox[
         FractionBox[
          RowBox[{"\[Alpha]", "+", "1"}], "2"]], "X"}], "]"}]}]}], ")"}], ",",
    "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"\[Alpha]", ",", "0", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"X", ",", "0", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6701617224948635`*^9, 3.670161742768366*^9}, {
   3.670161837326352*^9, 3.670161841973448*^9}, 3.670161885629526*^9}],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1:eJx1vXlYDt//+H+3akGrdq13q7SvKjMourNGiCwRikS27PtOqW6JJEKyZ4nS
QkmWyNJCUVIi7XtKqX6vn87zeT7fruvtH9c8ruc195nHzJxz5jlnnmktXTtz
uSCHwwkS5XCE/vv/tUnkzxudV8de9LyZfMR4w1jnzZuq//9twdSQ/jUlVQzw
p2T709IPzJqS38hv+wxsz26v383nCrDA5TsGtpnklm8BJaLIVz4a2Dbc9pvh
8Yci/7h9YPvY+d7pfK4M8lsXBrb7//2TQ75N4L/Gc+TZjUsE7waUKCCf5TOw
XZMl7F2SpIzc7vnA9iLuEGkeXw25of7AdsFB8cykAA3kukcHtuPaROz4XC3k
kR0D24v/7Ucb+SW9gW2V2WLV/f06yO/PHdgGz6tMxkbp8u4zr17e+bpddSMD
noEfnm/V8XrPL/QM3PPnu5pzJzvRM3DLk9Y9215Qz8Av/Zzm+v3jEPQM/GH5
5dBHncPQM/D1vvtvlo6QRc/AvfuflebbjUDPwC3smy9eXKaEnoFfPbQjYnSU
KnoGviYk8tOCT+roGfh1Cd8AyeFa6Bk4u0VBTfuhNnoGPv9+1ARfby56Br5r
6D3tD1J66PlW9ed+Li+LCauSqVo84yR6Bv7q7Y87G6fVoGfg1V4B3eYn/qBn
4OUjdql27BRCz8j1lYwjNkmgZ+BBXpI7P32URs/AzxiYb1QOlUfPwJ0vN9dc
Xq6EnoHvyghfEeWphp6BLxOIXRFpqYmegf+IX9w7zVUbPQOvn23Vo7qKi56B
T/uinH31jB56Br4vlS95scAAPQN/rX5mUarKKPTMTZW3TA54w7Qrn8gqLIpD
z8B33DC9HC1Tj56BX09rP595+C96Bn5eoGRB9BBR9Ay8/t2D4FGThqNn4Iu+
/f16ZaccegbetdFm54vhSugZ+OtZo9/LFqqhZ+Citw45bvypiZ6B827+VVuz
RQc9A39R9/1ZsZYeegZezg6Vu1FugJ6Bjz0/7kRN4ij0DNzRcKtHwlkT9Ay8
tJ5NG/7aDD2/e66fyOXlM0aSP+ZtyLiHnoGL7xVcZx7VhJ6Bb5wgaSenyWHB
M3D1nN2yLlxx9Ax8x5/dvgqBMugZ+KwHc7hdFxXQM/AbPgJVPzTV0DPw33a2
33zaNNEz/i5vUZZSpw56Br7npbaJurI+egb+zi9/ksNcI/QMXLvKXW/lndHo
Gfiy6jjzqlAz9Azc7MeOtrmzLNAz8J6JDtNZLSv0fMzkeW5AyScmf0qWtc3h
VPQMfKlST+T8khb0DHxafcTJHidB9AzcTsrn5POzQ9Ez8Mk+cn32LXLoGbh6
2MQfMX+V0TNwhcBu/ndzTfQM3DZq1pIJJ3TQM3C1hxFBQlL66Bn4c02PT053
jdAz8DULDMfvWWOCnoFLN+dILtQxR8/AT5/87qWoaomegVtNjRhnPdIaPQN/
Jdhecc7AFj1PPL20KimghPkt4z5+BpOFnoGLRv5oWK/Rjp6BX2lYNq5wnzB6
Bj7x2RbZS2rS6Bn4Yc/rPnN3K6Bn4Cnq4jH7PUaiZ+Bq5SN8V7too2fgKslL
TjeJ66Fn4FZrU3USWgzRM3DD05+S13eORs/AExQbt/tImqNn4Au2G3XU6Fqi
Z+Cljat2x/Gs0TPwoVsv/NbZZIuesf1lk9WNrtqj53/TJE45E/IzwH/m/Zfo
Gfg1l8tDRh38jZ6BR+6dybcrEkXPwKf8XLhvWJ0MegZutffQgs/dSugZePH+
nbdZRhM9Ay9ak971wJSLnoH3dfxZccfFAD0Dfxd1yjpnqzF6Bv7EPfLJn6Vm
6Bl/1y32XBTfAj0DT9sUeCspxwo9A08d/krpgqgtegYev21VfP0ke/QMfF/I
iczNwQ7oefGDd8Fc3ncmY6dVk+aut+gZ+Jzj9ywbu7vQM3DvgoK9K/XF0TPw
Lb4XklSvyaFn4N/sb7bOmaKKnoEXp1X4HkrQQs/AT1vuMU38pouegbc0nOMt
NjVCz8Br3ptsO3bKBD0DN7w9Zn7vQXP0DPxBil557QtL9Ay8T8jD5YakDXoG
XqXgOC17ph16Bq4bP365YvQY9Axcn+tZ/rzSET0/9otR5vF/MOdNjpQ5PstD
z8A9Rj4xXruuBz0Dt5+1QtrPRxI9A/+87nfJ7kkj0DPwMI2X6/SXjUTPwD+m
JCza2aSNnoFvftU3avZUffQMPFjESKc1cxR6Br7jRKfWRC0z9Ax80Z+7SQ4r
LNAzcKvIzBOTb1uhZ9yPykenv+3UM/BOq9BjExzt0TPwbw5Nnqv2OaBn4Akd
9sc7XzihZ9WRq+MD/vMqvXF7d1ZxIXoGfsI/2ju1pBc9A5+TJ99VtWsYegae
ocmM/5WpgJ6Be0tNNw2210DPwN/VHDiW06eDnoGb/VpQeWuzAXoGHv0ncMKS
XmP0DDzGbOTzkGzqGfiUvQXrjCQt0TNw0eN3Coe5W6Nn4KreGRemnLJFz8B3
Nxl0LSyinoFP7OZW/FVwRM/ALbI9Nsh6jEXPW/PGWPK5NczD83vFe9uK0DPw
tj1M2VlFDguegceYvQtQWieFnoF7fQ06HiylhJ6BD8+d8OTVMk30DLw/1nq7
9lcuegbO/2Zc0LjUED0Dt9x5wOF4w2j0DPzGPuWhXx3M0TPw9Z6PX9ntpp6B
78mLN5HIpJ6B169dptDZSz0D/5rZZ9hoNwY9A98Xwa8RX0c9Aw9xmnB8Zzz1
XPTvd+qYBaYtzyIkStAzcPcMz5SX5gLoGfjOdJXxpmel0TNwneOCt2+bK6Nn
jBdzNvwpoYWega8SiY7UPqGLnoGvvS556ICCEXoGXnpm38MVMSboGfhsYeu/
d0KpZ+DiqobcrW+pZ+BXPG1Wlg2xQc/AO6oUr/WNtUPPwMVC0920NlDPwD39
53Sej6OegUu3Hq8tKKCerccUTylJamD0Hs7vPiRXhp6Bfy7c1jjNXhA9A787
Y8Sf1qUy6Bl46KMNB1r1VdAz8Lfzb3fsD6eegTetdn1kpKiHnoH7Lt+q7xNN
PQNXUP579pWyKXoGfvBp8lfvV9Qz8MYwSTcFjhV6Bh7ks9dquhX1DNzgwFO7
HcupZ+BLPrV/VYignoGzh9PT+ZnUM/BI/08Zc+qo5/DG+M/9/U3MFpeDV8L2
l6Nn4FoVWmHKxkLoGbji9dOPomRl0TNw9X0O3z60U8/AbwovdZf/Sz0Dlyr2
NArcRT0Db/YMOfC0m3oG/ka1peTjGuoZ+GqbbTruDdQzcNeU7WcOaFDPwN9L
WRyMmUY9A7dLbLtmtZ16Bl5/dvXh/CvUM/AsV6eCmnfUM/BVt+9ML/o9lvXy
E9sd+N9zS0X/ltzkgDQm+7PjO8GNxUz9hTff+NwW5Ks0xnIvO7UymbofL/D4
f5E/WVuzdOrdPgb24+e+WXlNyQtGWszEQ2hECe4HePzKgH2+Qu0YHygzT4/D
+cDobNO0L0orw3jgjlNcbrqu/o3xxv/OTyHjykZHiZ2rwHjgr04aMYXT/2B8
9feT8/jcz8zE27MU347+gfHAa7MfloYd+YvxcZPNN5QkfWWqTUznn++twnjg
BlkZb86292O82XzfiXxuBTPlz9iZIZ01GA9cNPSR39A0AfR8YrhNQVJAJRO3
r2nsQfEGjAc+dXqF6LOtQhhf/+96+ck4b5KOSZJpxnjgZTOlLapHiWC82+aC
+v7+X4zsAlmj89EtGA98WlhBsl6OKMZfG3VpK5dXy7SH9tvuUWvD4xItDxTl
8euZrojHLqtD6fnyiWBOBpQ0MmeD7j5f19yB/GeKaK4e7xLjvvN8bo9EEXLI
W84ojlJ1P1XEwH0N8bG6YYmu+z2wncB3N5mpXHOh7Yf9uKd7WZhfacHrEOJn
OU9WTsr/ixziZ+v0hYYd72Vez24y5XCEWYgP+7ryZbWVMAscruf3AcqyvBQR
9oFSe2hJkjjGCwlVq2wQkUAO8dd8huYYjxvKni/pakoKkML4HUxse/MXKeQQ
P8Zv2Pl1m2VY5/d9+jy+LMbXWl0Vuf1FFjnEL7t8/G1OuTybnj5kB5eng/Hn
bZY6r3yrg/c18P5bwacWhnDx/EI+8+edPVcSYj+jT+BJe+aX7RVvQ29wn1aH
dbmridLrFvJ1+ckrm5+/LsX9AI/XnOAjqdeB+4H7V2/zr4URE+j1jPmu4vMz
1daV436Av579/gw3rxOvH8irXBs+oqu45DvGA3/QYPT4aWU3xkN+4O86kUSn
0J8YD5wf2C2tM4b2V/Cce3lTXt+uoGqMB+4+x1/W9AsH2w/Paxuyr9Wf2lWH
8cBzX357uChaEOPxuWborGl+kY0YD/yx4Eztbg9hjIf5c1eX4It1Rc3YTpjv
+YY5ix9c2MpM8hLJTQrQZOG+TuCOFx3VZMcCh/s6f3lk8/mx9qxgsGhcQIkW
xj967Ce4xNgBOcTf6/+24dxGB7zeIF70fHJ86Qon5BBvNEZKqfmqE7Yf5ktR
+7x+/ClqYwbGKVWM3xsiXxaLeQlVFvqZsMnOtXdFrFmlf9fzSIx/8vHsf9wW
OcSH8P5UMg62eLzAP3R+EMsJoMcLvLjkZvHDGHpcwL0rb2SseUPbD/MQ8yBn
uyXjOxgTvtARLk8J4xPqNDIyci1Y4NAfdrmnNL/otMDjAr7UQn3pdyN6XMBH
z7h7r24+bT/wCYl1nNVHaPuBD1E03FyRSJ9noT0200daRlbQcRzGdzOZ4BiX
qN/Y38J+tN1+uQWEfWPAA7Y/cZhMyld6fmE/r9v4uZxK6gfe95mtHNiG/hP6
26M68+xK3whjPwn8h61M9/4fEtgfAl/iHlmUdlga+z3grZUitWPi5bA98LsG
GQPb0M9AP6Zcu8J8kgoHOfRLp7hTY7NHCKJnuI+mvfIO+qBKPQOPLRO47jGb
XifADQTq2uSDnfD8wnWebFETp1hnhecX+Moya/cCHXp+ge/Nip+7ah79XeDe
St/bTYLp7wKPPTHj6450J7zecB7OZIy694Neb8C3bUpOi1ah1xvw5I7iSGYq
bQ/wiBe7FsnvpO0B/qz/Znn4DXq9wXViIlZxU691LAv9GPRXke7PtSJ6Rdjh
z3t3bvhv/Pjy4bS5IY/PFHnNauute8HUiYlZ8ON0WOC3366w/fVSB+O3jduQ
lBTQxOid3a/eUduA8cAXHrSvvbdqLAvzfxinDPuq1gVF1DJKnUcunPxvviUR
cy2Yx89m1JeFXIjfVYnPCzAeZfLfueZnNGD8vjWVGSVJbxnxXy9uvXvzE+8X
iJ9xIPvVruc3GWjnBf/M1XxuHqOf3x8WciUP42H+2RzepGD05yHGexUuPFSS
9JFRdLOS4zUVYjzMP7NNN8mpL8nAeEWnngtc3hfmdcqdCF5CMcbD/POtxP6Y
0rpsjC+4ciYloKSMMX22kHftRSnGw/zz89xb01tPvMZ41yHRK0uSKhjVsmPc
MaHlGA/zz+RwTVursR+QwzzTbf2Mz5FTCpDDeeS8/mKhnGGF7zdhHvLeZFz6
3mkCeD/C/ftTb2AbntcgfuiWRMl6iU5mcnZ+U0nSH2bB8XH9jwJuMsf0Mwvk
LLoZeF6D+CmbotpPqA3B+RvsP23OwLa0buNcHl+Qhf2kbm3vSe0WxOc72I8c
c0sjomko9lewHzWVgW147oP4ozctJmf7yGA/BvEnvw5sQz8GPPzDwDb4h341
l/PRPyWgEa9ziA+QHNiG+w6u//Pp0d3J7WNxPxBv9WJgG+LhvGRv2v3yEJeL
z9GwH+FSW/WpeuX4u9Ce1EVXQtpW0/33aoT+SQooYI7POriq1b4Ar5+UI8Zy
HE4x4798nFHt00/IN7XkGPP4pYxc5fCErrtfkCvdttTh8cuZz+Y7dxvVlyEP
+vd8/J1556S/bvrtCuSFI/Ic+dyfzJR2odyS1krG+nDR9OSAfuxPoovst+7Y
088cONQ8JDlABI93XmLF5oc7RNg1vA5fPlcS+SfPY+FBYyRZY9HeyqQAaeRH
52TYZO6QZlPNBIqTAkbg+b32w2HerNcj8LkeuGORqbnFTHn2km//SS5PDvfj
czlUqGaBHO4HzssKi4HtBWc4q0uS5DG+9+DS5DFv5dkQz+PTBTg/8Dmladd8
r/EnfzDeAu9COZx2PL/KggPbwCG+cMaI4b7n2pltcz5t5nD6kCsvi6qpkexn
5u5p0+Fw6PV8d+/A9o8bnYocznDkD28NbD+q7RXh7KHrkX7WDWz3DVons5is
k3EeIdjdv5uuk/l9zy1Hv1+RPWYk3N7fr4T7eWw8sA0c4l03fD4tkavCfmBE
G/t3q2L86vED28AhvuJ17kj/CyNZBTKuQTzXc2AbOMTfMZhXf85RkzWxFmnp
ZzQxvtVmYBs4xGcWVDcm3tJi8/79Ll0HVTRuYBs4xGdP7FzepqHDbnQbUtef
QddHPZ0ysA0c4s/F7FjsEcnF8w7zlpl3oz0bTKrw/OJ6lUaf+s+Tf+P5BS7x
sP6mRRsH+z1cn6P+5nL2H1EWzjvwgzFzt341HIbnHXjGu8Ix+tkyeN6BNyjW
ZNWKj8DzDnwCWbcD5x14R3Rv0pgvqnh+gbeti2g77KOB5xF4/qui7KN7tPB8
AV/Rx9thPU8HzwvwUN9jK8IcdNE/cE/ZrhEr9PXRM/Ahvm3WB9QM0TPMA4t+
B24Jia9Gz8D1GlUFqj51oWeMjw6cPkZWCD0Dd6l+udFHXwI9Aw/wsH3v9Vwa
PQN/7vxGpPGiPHoGnjdj05DAq0roGfgrsm4HPAN/erO6QjRSEz0D3zzqW9yd
Am30jPPek1Oez9DWRc/A3SM3+4/bq4+ecT3PBLaioskQPQPv3vM+42yAMXoG
PolJtSv9Y4Ke4fm9O3KlofH7OvQM3LNx/YErYn/RM/A+hQjv+1ki6Bm4ZFlG
s53gcPQMPGT3jOFvlsqhZ+CG3k89EgWU0DPwdSJS4y5+VkPPwDvIuh3wDFzJ
94/upUgd9Ay86qp5wbkZeugZ+LRgs0XNGoboGfgmfVnbmULG6Bn4yDKThSf+
8waegc/+pXIpi2OOnoEfutveJx9igZ4h7+FUvVOzb3cTegau52O0vvROP3oG
rpm1qeBPshh6Br5x03efaRoy6Bm4SsSKjbutFdAzcG3u/Qe+karoGbj9qee3
1sRoomfgNmTdDngGfj68fkPdeT30DLzYZdnYppeG6Bn40BUp8/SHjEbP2J7p
ayOnjTZDz8CXjC6oGV9ujp6B/xWY/vF8tCV6Bl45Idb60iJr9Az5omz13Oqd
OS3oGdfzyLb8aH0vwIJn4NZvz5l+KZREz8Crhsmk/Z0qh56Bfxk/+s8kKWX0
DFz5pXuNkrYGegbeM1/j7d/H2ugZ48m6HfAM3NTTdGbSRkP0jOt2Qt7zBX4b
o2fgOpINd/a7mKFn4Pt5wY/ilSzQM/Ab8YI109ss0TPw5TJ2Cw8UWqNnjBc5
lbYszRY9Q56t9VKE7t3WNvSMvG5RfmKxEHoGbju9UPnQ7+HoGThruX5t2/oR
6Bnze5atXna5qugZ+JmxUzMXOmihZ1w/o3Fg4sb7XPQM/C9ZtwOegc/Uzepx
aRuFnoEPr5hYV33fFD0DDwhZcP1xpjl6Bu7qfYRrkGCJnoErTZf5GBJrjZ6B
379utqM10hY94/qivwniu8Ls0TPkJ6XGzV8mYvwbPQM/9faz6rIKEfQMfKrn
dpVNHBn0DPzWjCse9tsU0TPw4e4RutEz1dEz8FfzcqLyUrXRM/CK18/uX1up
h56BN5N1O+AZ+LWTavLPxUzQM/AvJS0zTTvN0DOuz7FqfBveaIGegRctesx3
q7FCz8DlJG+KeVTZoGfgiam9cp9/2KFnbP/sK1ajf4xBz5DXPdTp6V/u24We
gXcbLVA2Lx2CnoFn2YSsnrVWFj0Df/CqLL5gtjJ6Bh6SITVXlaeJnoHveiw4
s02Ui56BK5v9eP2qRB89Az9G1u2AZ+Bi2z71e/533YJn4HHn97n3FZqjZ+BL
01JjruRbomfgc4rdqnTyrNEzcL8fZ7uT3tuiZ1yfY6M/9u1be/QMfMRJu/6e
1w7oGfJO1dM67K+d7UbPwDfJNAQ7PRFHz8CTveqKvDLl0DOu/1F6+ci+VwU9
A98enLr08Dgt9AxcvybVW3CkLnoGvmPl4rU+YoboGXgUWbcDnoFrn72rmb/d
DD0D12i4MnH/Vgv0DHzxkJjQ4iAr9IzrlDbZjhm9wQY9Ay/rqNKUW2OHnoGb
tPred/Edg56B72lbdfLCIkf0DPnPQ8vvhuak/kXPwO8fqBVPOSuJnoEHtWX6
1zfKo2fg6WP6hUJXq6Fn4DXb1ZfXymijZ+BxgZbhp/qoZ+AuBbbe49upZ+Dm
ZN0OeAauf3aa+pg26hnXBS2N+LykkXoGruy89lraL+oZ+IPYg5c432zQD+Zp
+1WlbmT2oR/gJ9x25T2yHIZ+gMfF1DmXdY1AP8CHT3ven3Z5JPoBPueqs4Va
OvUD3N9ks6zDXT30g+t/Dne/8b5qhH6AfyHrbcAP8Lkhon5hk8zRD3CvEcZf
RMdaoh/g5jv+zuZZ0PkS5I1XJvyYN2kWhwUPwJ0SxppnXhqOHoBHu5vdlS1T
QA/A5W1/2e68oo4egJ/de3XXpQk66AH4sJvyhXZ2+ugBeGlazUfTUaPQA+6f
rIcBD8B/Hrs7uWUP9YDvg/x+pvqspx6AdzbXRIktofMc4C+faTjViTihH8iz
9de+/uZgJYB+gNd21HXVV0mhH+Bp0k/M/l5QRD+Yr3ven7kjSAP9AG85+STr
9y3qB/ikrp97DsRQP8Dd8rZKOR+lfoDnkHUs4Af4fIHXCyLiqR/gYZ4OaZ18
6ge4150A4/Yd1ngfAd9XIatYs8wW+yvgyhJLSk0n22N/BXzxC+/5Sma0/x+6
be1QAc5dJkxu+73OvTRvNp/ke1fV9u+9tJrmxy5ox/1cWxLPFDmelJ64t4+B
411G8jOLBuW1BMn+h3GfSQ1/QvNaLmT/73sXRj9eSfNXB8j+53zXcAuuVcPj
zSb5Q/vzqzpM52rg8Ypdyl+WFhDNtPger7L+pInHu4fkCZ/9qN12uE0Lj3fn
ifUpfO5T5oR14te54jRfNM1KcgOHk8lcezw7tPZnBx7v2AeT5pUmPWYWS3VO
PruEg+f3OsmTjB+Uz9lK9r95iOep2I00n+NK9r9IerXgsRXqeLzmZP/HtCxr
a6I08XjzyLqFqe8Yyyu1Wni86ybfYE5yU5i9SrXDRLV18HilTpfcX1OSxOQc
6Sh66sjF++j696F6bvwHzNfdf+Lv2eqih47Ft+u5vNfMtz013I9raT7nucjE
eD43h4mXvScd4ULzOadvli3mcF4xI0bfk98xURDvI3h/tGK9skfYdzG8j+w7
pQpKkp4zGzKHCqboS+F9BO+VirQUdsrGyeJ99Hn8uInJAc+Yv7fDLjw6TfNm
WiRP8nJQPqeFtD+5PKJNYzrN52SS9vs8Cs1arkvzOWGk/V8Lasp3V+ugZ2/S
/tI26yM7InTRsxlpv7D7PNkcXX303H9uoP2cBHM/wygD9JxL2j//fPOZu3U0
b5b0731IHjO0+WfP4mM0nwPvv8JqbofYzulBz4efBPN4/A9M3PFhxzPT6Loa
eI82eVvDiB8bhqLne6/cRNeUvGN4wlHXu1tl0DO8j1vH6buwKX4EenaX37GV
x89lIjYuvPKCp4yec0mepH1QPucBab/VbJGiIBeazzlH2n8+M+2eZbAuvX9J
+5PHZc1NeKaPnleT9jf4qXTEVhui52uk/e/n6LTM6RqFnjeT9qdfW8uNbh6N
np1J+599fBRz7b0pel6/N/w6l/eJubLxm5iEGc3nwHtDMxujxJ8/+9DzBH0j
Hz73I/NOW/teVj19/wXvHxsuX5+QME4aPY94m6XG4RQyf9a52eTEyaNneL/j
xjxZ5i+rjJ5/rPf6FFCSz+wZGak1b89I9HyE5EmsB+VzAkn7I0Su7w+dTPM5
nqT9RTfmhLcL0HwOS9of+iN+2/aEUejZgLQ/kJt4p3uaCXqWJu1nQtec/xNo
hp47Sfv5T2M77BNp3qyMtL/n5eRwTiPNm5nUmjwLKPnCjK6a/XF6DM3nwPvW
odXf5p7wofmc/tCXO0qSPjMPctc0ivVIoGd4bysbeFth4QpZ9Jxn7W3D4xcz
p47eidoUpIie4X2ZbmnGeeNYNfQc++/9YRHT4XnY8kc9zZs5kzyJ0qB8jjFp
//qIgDesLs3nyJP2X1I/9GuOE83n/CXtLzPkHZ81wxQ9/yDtfxGhIXnKxBw9
55L2n5muV5R8zwI9J5L2N+WG7ztrboWez5L285hRXzck0Hlg7czc0qSAb4zq
fI5MxDOaz4H31B7myn+z/Gg+J61rWSSXV8ak227fXq5A8znwvtvp0u7kx8fl
0XPIv/exXxnbbl/NIYwKeob3jw6HZaPOS2qi5wXOkeIcTilTtFT25UYRHfTM
+R/5nGrS/o0j3wu8u0nzOR9I+1cofND7Lk3zOY9I+9X8FxwQGUPzObGk/fcm
msqH1NK82RHS/mj+we+jz1qh57Wk/a/zjI7a8GzQ8xzS/givr2uHd9G8WcFX
q57+/grmxpBh7tyeDvQ8ibzftzCf2DFmHc3npP97P1nBdCqdbPAPl0bPsE4g
MvTAmPvRCug5bv/bBwEl5czlhY+v3vqmhp6VyfvcV6Z9UxdepXmz4E9R4Vxe
OZOyq3j8jSaaN1tE8iRNg/I5+aT9161eKYa+GU3zk6T9Cg8XGSUn0nxOKmn/
Q37YhsC9NJ9jQtrvp9/drDWd5nMukfYb5KvlqI6k+RwF0v6wB1WjHtfRvNlR
0v4Pptfe+qbRvJn5v3U3PxiPQ6vFnW1oPudK2srf/f2VzPi8y8dPraH5HJWf
75eVJFUyOU/y7skJ03wOrK84MMEyQuuQEnoWtDs3js+tZIKlEhZ5TNBAz5vJ
+3FOf7XSGAUd9Fx7zE+dx//OFAZ0DCuJpnmz9P+RzzEj7ZcviovT20PzOXGk
/YKn3JQWXaD5HCXS/neLhjuc2EXzOcGk/SNqe0+0LaT5HA5pv6eNW0alE83n
bCTt1yyv/nBbneZzfpH2y4QJrDrJofP50In58jx+1X/zqEdr7VfSfI5QoN1+
Lq+KUeLLnvKdTfM5W6LOt/T3/2Rk47YNtfKi+RxYr3Iu85LIIZbmc7zrV71L
CvjJHJPZ86sogebNPpL1BsYuX5ij7jRv5srY3gwo+cGcHd6QMEfIAD2r/I98
zgnS/gqjWyaSfjTPIEjaH3mgdOG9GTTPEETav1w+ULzfjuYZakn7dXsYxSla
NJ+ziLR//rEHleXiNJ+TT9o/Kd6qvKWVenYh7f9Z77DgQin13NAdezGgpJpZ
V1xZNP0Yzecs+ffdQDWzsfwDX2Mkzed8mhqwi8urZqLME3T3h9N8DqwLXbPA
Z7Hjc1X0/CTW3qsk6Rdjkvc3vTqC5s0sX1/ISQr4xTC/Ekrz59J8Tvy/9Wu/
mKbPSxL89Gg+Z8v/yOfUk/Y3LHm7y/YH9exN2r992schJz5Qz4Wk/atOFk2y
SaeeXUn7N/ce3bTvKs3nTL6z1oTPrWN+C4rEvQmn+ZyM4o/nAkpqmc7u5LOj
G4aiHytBR0kev5aRYx9pjouj+RxcH7u5f81NWZrPUfv3+zVM+N5la908aD4n
fNeaOSVJNYyqTl3vtlE0nyN8rTA7KaCGSY3c/N5JguZzPv2PfI4baf+5myvu
8h3pc/oT0v5mK111WUP6nG5B2u/K+cqaKdNx/LrP2LSkgAZmfP7JtGpHms8Z
GRJnyOc2MCUGv33KvGk+h58kcSagpJ4Rm8+fnMOn+RxYp7oo1iR3vhHN52wT
L9rI5dUzBgk/x+5uoh6aLJwq+/vrmFUx+anr86iHpQsuu5ck1TE+ydfFGpKo
B6v/kc+5Rtpf0eo5etRW6kGNtH/qk1PC/iuohzDS/sPhBTs83akHUaVhriVJ
Tcytze+XaWnQvA2spyq22DdjzA2at2lc9ZnL5zYxEaYN10YuonkbWD/ZWh59
cpg0zdsUP74iwOM3Mi+uBxxdsIrmbab8kgzk8hqZ5qvz/KVn0LxNpvT6sv7+
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
7zY5X9OidZDgfM0i9Yv+13q//w+OSmk8
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1: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
zHzIkGIOHISsh+6wzHbwGsVb6A5lzIcFz9UuwWtPc+EQZBb8rTrJ9gSv3XbB
60HzqFOwr5LPag4ek/l5tinm7IxiripH6JvZX4hnExbXNj86BxXPJ75lKG1S
yXNfa0C5RJPkvEZcjeKEYZnj5ruDfZ/4PXF7fQqfNLH4Zl+VnF/oft/Td/fk
fFZc4miOj83sN1sWc0axwlkFfl84eM1pbP9/HrQu5pPmlXykcpnT6PNO8HVj
i2vVd3zxDIontN4VbyheEFegmKFesi/uFZ3LVCt0ym0VK8jH75ecN/UuciLF
Hvsm3294YUPkw8VRxOKc+vSMfoaJxdxVDjsqcz6m59R7tirskOxR2+KdZIMq
FnhcYYsmFrHOWGTjZK5McUjdZPvXPJlLEKdwUMncl3yWxkU5+vnFu5xePIee
QbHe5OI76v5TMuf4eo8pxbvIr07K7FuHFf0VH2qOaK6Il9ulwPrG+k39tnzl
ecE57NnB9lLzUN9yVPEMoRhjPZvGb6fiWj2z+CLN34rJ/Ns5md9RcY2wYpsx
rIeWyAUcL0jO4Q9C3hwc1x2c7CdlH2Ub9y+O6yCrFmOleV+t6CN/ukdy36ZF
n7OL8ZSfGVSMw8ACa9zFN0wt1ojur/7iscUjiE9owbPcEswFHZLMs4hvaRnM
Cym2nJvM5+yH7j7kZcFruW0yP6nx1/OI52nCuXnIt7l228y58G58zIcVnylv
CFvps9LewRyE1qx4tytQ9gYv55qnOD5MNpz+Lyfz4F2VOwfHJN3AC4PjkCOT
OWjxnEeBnwmOVbqDNwZz4Ior60TnzhOU30XnwuOVo0XbyTOVo0XnxWPk86P9
1+jkPH6+1plyhyKHUV7/eHCtoYtyw+gcXPHmbuDbwePkG6Nj+7P0LsHx1dHg
OcF+7VDw58Exm/LNtcExnvLK1cExnnLPj5J50uHI55TXov+HsfpYvqTkvPXT
4HhP4/xVcNyoXPW2svuspv/i4Jizh2xI2eO8CP2zyXxNB+S84HnbEXx/MCfZ
CfxYsH85HLxAPgHcGbwoOMY7BvxAMH94GLhxdNx+LrhR9BieA/6N9kvZXIpy
XvkL8eXiSRSbtED+y/nnNA/L9kHyO+KbxbfIbzaP5mHks5opHk/2V+Khv4uO
T/aM/h76LnWQq2iXgSsgl9OmgwPyXdo0cBn5Du0i2UvkCtoMcER+RLsCvB1y
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
          "]], Polygon3DBox[CompressedData["
1:eJwtmnccT9Ufxu8995wvLYrSTyozWaGUiBDSJkKSBkppae9pVEY7SaWIaO+9
S2nvvXdpb2mo3/P2nD/O63ufe873fu/33nM+n+d5Pqf5mAlDDgtFUbSoiiLq
88xUFE/rs5dOblsripE6ub7wrLIoFqjvKLWrhDdQ/ybqX1/f+0V4PfX/odZO
4+8X/ln9m6l/hPB6whep72p9d7LG1xPeXJ+j1b+H+psIz1T/fPV3VDtMx8eo
/9iar3eD+n/R9X5TX0Phi4U/Ev5ReIraU8JbC/fX+F/1vaOFHxF+T30T1R4U
3lK4l/onCT8p3EO4r/AM/dYEtaTWXt/lIZyvj+fU30r9rfS5SHiZ2qc6nq5x
h6pVahtrfFuNv099P6lvU42frOsvEe4p3E/4HI07XK2OWieN31PjN1D/bOFr
NPZktbuFO2t8N40/Rfge4U2Fuwv31ndaaOx2avvreEN9/2b1f63+DupvoPFt
1be9+g4XbijcTnhH4SOE62j8pRr/qsYPF95O59uof1u1sTrup/M76LijWim8
isbP1vjXdH53jZ+j6w3nP6vvGOGjheeqf0P1dxQ+WHiacB3hjYQPFT5PeA3h
jYUP0ve+EB6maxyi482jn/9y9e+p/puEd+cd5OsfkefhqTp3nI5PT55Pm2t8
T/U30bmfhRurf5na7hrcWPgCHc/T2APVThf+t/T7C+qfJPyivv+F+k5Lfl9d
hHuov5+u14rnpzZOx60r//b+vDcdN9P3b9X4b/P/PVXfv1d4M+GthE/UmLrC
kzT+JB2P1fh2wouEb9DYv3TuJOEnNf4j4TbR3/9RuLO+f4jwVsL3aPxdzH3h
nsL3Cd8jfKhwD+F7he8WXk/4euHP9f12+n5j4euEPxNuK7yq8HThN4S/1vgD
hDcTvlnfv0X4YOHuwncL3ym8mvAM4Tc1/hvhJHym8CvCS3mewl2Eb9H4W4UP
Eu4mfJfwHcIbRc/f7zV+pH5/A/3fX4WbsKZ07rjk+2ud10c9jb9S+B3h1sIn
Jc/nDsJbCI9T/ybC1+v7N6vv+OT/u3GOJ/y/y4Rfz/Ntf+EOwtdp/E0au59w
e+FrhW8UHiPcVnih8PXCJ6rdJNxe399c35+u+23EetPnvjXHHGIP6/V5fbd+
dLx7N8/nNaPn/3vCbYRHC7cRvkbjr9O1G0XHi0/UP0L9/1VeD88KtxT+n/qv
zbFkD+HDkuNNvXy931gHwo8Kv6++jaPjwQ/CnRhfeb3UY36p/U6cVP9j6v+A
9yFMGDtAfUfq4Mjk571+jhcbRP//pcLthc9W/7PCfYS3E17B/Bd+WvhT9U1V
e064L3FC/WcJPyPcW3iA8N8af7LwEuGP1feP8CnCTwl/IrxM+Djhx4U/FC71
+xOFXxD+XLgSniz8kvCXwmsJXyj8gfD3whOS41GjPL9n63obCU8Qvl194zV+
c+Fb9X9vE95Q/b/xf4VrGvMgeYJnQU5S37Ma/5+Oh+v8XrpeFJ4i/LLwV/p+
A+GLhD8U/kH4p8rx5AHhFhp/ePL8Wzevv2OS33er/H6OTX6/G+X1vbqud47w
W8Lfqq+p8C3C3+T8yRpYPXiOsDbWVpup44917ieNvzg5/nQU3lJjHxd+U/9n
BPeke1ss/JbwHsIPCi8R/lL4QOac8CC1DsKvCm+ra1yi/kd1vF/ODzOFHymc
C8gfTwp/ofEH6NwzOldf514VHsY7JncLvyI8lJgmvJrwC8KDecfCqwu/KDxE
eLHwd8H3zn8glj6r639HvCfmqP/55PdzBGtM+Bnhb4UPY43zLvPz2kTX6Kpr
11V/D/Xvpb4ricVqDwtvwxqsHEOJpcS4KyvHOGIdMWtO5ZhF7NpS+IrKMZXY
Sgy+SnhN/cZrwsOZw8JbqH9dHe+u39+b/8qcyPPpffU/LfwN+ZEcK/yU8Nfk
OuZU5WsSj44N/q3H1N4gb+nc/eobrv/3Px2fp3Nzk2M+sZ+YP5d8LNxTeG+u
xfrQPbyev/+0zrXk/oQPEm6h4zq8Q/JZvv7aydzhceG/iGfCfYndxBThuhrf
iPfE/xFeU/39yA3Cvwivk5wbFwv/A5cT3kX4FeFKx4W+/6BwHx3erus0r3n+
MP++EG6sMTsLvywcdNxEbVBpTvKgrtdI498T3kf4NY1fR/hd/i85SLgm/AT8
h5wonIQXCw8gJ8IVWBPwGXJoZf4zQPgx4eWsJ2Kuzv/AmhZuUPPzH5Hn9xfw
MeFZrCcdr6r+54V3Jaaq/2Pej/DBXF/Hn0fHlqk8Xx031Ph1Ne57YpbwKsLP
qX8QMZxYlcxVTiBGJPM1uBdr8A+NLzX+oTx/79D4UPN87it8p/C/GvOQjrtp
/vRW36fRXPtE/r+OP4vOtWfzfLhXXX8n4ZeEy+SYSGwkh1+q6z2SvD4H5+u/
Jvx76Rj9ZeXGe3s1uY/7H63+H8lp0bkRfl6nMJ99Q/1/ls4B31XmifDFXsLH
655fVP/Pwkfx/CvnhFWCOQe5Ag7fXHh+YW5PzG0mfHXhWPx+MNck55J7yQlN
hecVzhUbCHfS8Xid24XYJPxb6Zz4ua7/svCvpXPqp8IvCf9SWiN8LPy68PLS
HO3bypqhDOaMaIm2cKDSOYPc8S5zPjiH/VI5v8A1yRHkinfU/5/wGTnfkMND
cI4jtxPTWwgvKBzrydlVcA4il78l/HfpHPyD8JtwyNI59fvKObZuMMcj9x6t
dki5chmu1C8d4Hhwed5Rcs6NwZyOXAwHhavD2eGm9xH/83xbiJaDowZrria6
v5+TuRccDO5JDIVPHR0cWx9IjjeszxvUd35lPTcumH89qLYkx6MbK8dc+NJR
wbGYOdlKGBHKXJ1FTBM+NJhvXlBZfx4QzO8eVnsafaNzN6vvIeGnhHcQvkn4
NGKmjvcI1gOXCLcQPiSY/15YWX8dGMwvN1ebSDwIjr/nVdar+wfz93Mqx+ex
wfxuIjlOeFSwHkZTrBnMWdAazwdzOTgdQgaOU1/4gsLcB479P+HLC3NvONaq
wRwB7rWSAwVzELgR8X2f0vHlo5g5SrAGhrvA8eEicBK48RnkZB3vGaynTxde
VXhksP6eJLyG8F7B+vPcyvppv2B+DEdprOMrCnMXNEDDYE6CNuiBJiodY+EQ
zTTxPs984TPhszXmLO5Tx0src0q45TZq2xMrdb0dNb6/8E7CO7CmuPfK/Y2S
9Si6dEfhHdX/Hs+qMv/syTPm2VbW8z2i+el/Gr91zWsGbnFf8FpiTZOL7w5e
6ytjFLE8OHZtkuPr71kPdBR+mLWS9QhrDi5yb/Ba3F797wjXrcx/txN+W7hO
Zb8EzgUXWxDMxQao/y3SZGV/ghwGt7ggOLeRo8nlFwbnbnLw2vr/z5bOzcxZ
tNumhefyX8lagzXEWiIHws3OD86NxG5y7x3BMfxu4d2EzxWu1N9f13+DuVPZ
/yAHkgvnB3O/bdX/Ju+6sn+xls71h0+pvw/6AH0GX+Kd5tzfm9hMTgrOwXDD
84JzMzmQXH5pcG5cFu0/DKjMZ7eK1h8rgvU9MZVc8XBwrN0/We+j+4fWHFPh
Xg8Fx1pyGLFrRnBu21LtU+F6Or+zxo9Nzl2NeQ7MF/gxuUN4oPA2xJvSnGeM
jreGw5TmSKMrxzzW6hfBsZCYyNr4MjhWbpXsb+BzkH+667Mp+VxtXx33Jn4W
fme8u3HJfhm+2TCev663QniYrjeqZg5PbJsZzO27Rftxfwf7DcRQuO3k4Ni6
ZbT/9VewX0QMhutOCo7N3aP12j/BfgcxEq47JTh2do32q/4M9p86RPtlvwl3
qZlT4x+cHMy1ma/E8ouCuSwahNh7cbA2GZ+s//EB8JuI0XDZM4NjNzkGLnJK
cO45KFmvodvwm+olP7vbde6b6PcLV5kezI2uq8z1ThdeQewV/px4oO9MK/1e
eb+r63iO2mbCdfW5tdq5pecF8+NvtbOE6wt/puN/1aYKdyU+MqfVriy9xtAK
Rwa/v8uFuwofIfwnXKuy3wbHPZA5oNa+NEceX9mzxLvCw8LLvEznttDx4Tq3
XH1/JHN/cgy5hsZ8GRPct77+88fqH6tz71XWBPgdxwVrBTQOftMxwdpnqPCm
Gv+hzg0mzyRzQe7tKF1rOO9T/R/p3BDifDI3516PVv8I3o/6P9a53cgr8EXy
L+uOeF3Zb4Rjcq6pzn2m43Ea8wm5UeP7CHcWfhV+pv5PyBXCH2R+spVwQ/gK
uVD9H7DWhN8idyU/++bC1+n76xITWUvCb6h/Qziw8P7kw8qaA649NRQrSVAr
YqQOu2vMKN6Hzu9M7KmcY9CYaM0bda4J/pnahzwPtfV0vJ76fyrM+ZeWjhvE
DzTWV2qvR3sveDB4l2hc7v3yYO2LZkDLzA7WEnAYvDPWENzmWvKAjk9T/z/q
u76yljkDHpm8fuFSE4X/S55jC0rPCeYeGgFtMi1YOzAGPcua57tocJ7VZcHa
HI3O3LkyWLs/ITxGeI7wGsK76vN94c66xho8y+B820l4deG/c/7h/okFI1kP
/J7anjo+vjJ/moIGqDwGLXNS8HfxU+HO40r7uazZO0qvIdYymmkd4bdLayk8
BubKVcHeAxqcdz03WJujeZlr84K1MPkL7nF1sLZD4zXStd4prf14pneWXsM8
a3gH/GNjtSB8QmWvb3Jp//ZgtWYaO7S0X40njab5qvD7/obnW1oToefQW6y3
3fL6eJF8V5qzoccfida6aN71kzU8Wn4dcnayv4B3zDOEi+I/dq7sSVILwePA
61ibHM584P2Vzonovc107sTSv9k82VOnloMni9e+cbIXiIZpA5cMjovEx1fU
f6Nax8Jzmrl9c7Seqi/8ZnSNZovKnJnazczKa5MYyfp+Uu2JwpwAblBXbWzp
HICebp3spaNJWO/oWWoNcDi43NDgNcvyPUWfnTVmZx03hPMkzw+4L/+xi/Ct
wscT53nHOt6qcp4lZ5A7BkbHNmIcfsMu0bGQd4Qe3lV4YOk5XEt+Z8Qx4hnv
slB7ofAcgav+l/kmnBRuSowkVhLf8UKIqcRW4n/j/H3WEmtqp+j/cwKxSK2Z
jgdFx1ZiLP4JnAZug55fXlnPMvfIYTfAfdW+LXwNnkdTta0LP4NO+f5Yq6xZ
uPKw6LmDZ4R3NDR6ruGZ4Z3tFj2XiMHowwk15zliLrH3rejYTQxfQ7gv/mpp
DxH/B88Q3g//x2u5PVrrNxB+N/r7cEE44XzWbs1xlHiKl3Kqzv1TOEYvEX5M
bSH5n/iq43E11xHxOPA6Nov2rqiB4VfhwbFmWTOsnW2ivShyLv5W7+h8R47C
X+kTnd/I0fhBLaO9LzjedzpuFe11wQF/QgtEe0F4Ql/quEU0F4HTfa3j2dHa
DM2H9ltD+Fzht4W/Y71mfojGQ+vNyfwRjYZWI8eQa4jB7+h/XBat5dB8aL+j
dG58uXIarawvXqH+SwprMLTY5dFaDA2IFtw02utCk8GXxtbMw3kHbwvvUzMH
wsOcoc/fo2Mfc3xrnqdaKD0npqr/7Mq5mXPPRc8fap14DJskc1R4EnwJ7oqH
Du+Cf+GPML/wHvgP7chNwrsU1jTv53hC7XcV4Rejay6bZo72AverFkvP2WnE
g2ivDM2wLI/vUrkGQO1mTM2cDY2PPuL/b1lZLy3Q52J95y4db0RMivaTW5fW
eGi9LtHeJjVA/M79as7z5Hv09t1qowrnlA/z+qJWjAdGfN5XuFZ6zXE/xOM9
C+c04tWo6P+6qtpLOr5KbU5hjY3W5n1wL2gstNYpORaiCZ6O1sTwFvgLWnqK
PtcqzFmvVf+ZwmsW5rSLhM8SblCYE8OfDq25BsAaYa2goanlPJ/jxfiaa8zM
IeYSmnxI5Ri2UqsLD64cY4h/aF5qP2g2tPCBNWsm1ghrBY1LLR7NgvZFo1N7
fyjH+4vhjIU10/U5/5BbR+j6GybXq/FW0QT4w2hC+PMDhbUimrOlrvFn4XyD
hqWWj4ZB26JRt608x3meaFhq8WgktC0anb0NaCK0O54q3irvYJbGH1YzxyFG
D8r5Bc+DOdg5/z7a90nhc5KfF5wCjjw7Py+8C9bXpckatF5+Z7w7am5Ngmty
1OKoafSvPCeZm9QIV5T2E6kdwlGJGe9k7oomaxdcw0OrUZP6oTSnxX8kv9fP
c4C5cFDWuMQ8Yh8aFa1KjiHXML/wZvBQdsjPD61PTeii5Oeza+WcTe4+uOaa
OTGZ2HxIzZqHGEusxYPpGqwh8WaGCK9TOQY8DHcVblg5Z9xaWYOvlTkF3GKQ
cIPKOYj8MVh47cr55LbKNSpqVXjoeOnUWKm1/s71o2uq1FbZr/Foxs0q1xCp
vaJx2WtBTRXtS00ZfxO/E32GJ0G96rbC8Yb3Q+2J+tWFyZ4QtepbcvygJklt
Ev+NWjweErVlatp4S2hatC1+K3srqJE3r1wzpHbOHgX84zOE8QupkVMrx29l
bwk1RWqL1BSpBbMHAT98XuF6Gh4CXgL+NX4ufApdi759Krr+hl9+NTkvuubI
3p25hWuR8DfWUld9JyZrdrQ7a5C1SM2Y2jE1cPaeUPMkl5HT8EaocVLrpMbf
JudP3gU5fd3o99O0MgemNo6fjx+KX4p//3Xl2gqai3oG8+MsciXvO5qPLi1c
U7i6Ml/4o3BMb52fJ3sPOPd4NP9lb8ly4Sei+TdzYVH+ffLByj61LaI5F9wL
T4Z6DvPvhODfvCXaz8XPn1jYv4V/cm8jM/+C/3xTeH4zn9mTgL+OP48fy54B
9sLgB7OXgBo//jB+MPUMPBv2+rAnBC8Hj4e9JexRwfvBs+mS/YPueT1dEswJ
7xQ+oGbP6bb8fsm31PJG5fXG+jk7+B7vUN9zuufvde+HC79d2RNrnN8B7+LC
6FoBNQlqE9smrz18PvT1kGQ/kRowenJAcu2PGhZ6FI+ZvV54ynjPaNzbS3se
aF8058ulr4EWxaNn7w7+B979G9HaAw0C/30tWpt0zPliu2R9SY0MPwiPm71j
ePZ43zsk62tqgviP6EpyMc+L5/ZMaW3BO2SefabxqwVzuH/hE8l6khomtUzy
O1xjnvC1yc+I+XJn8LPDp4Xb8Hx5zvCpljq+SucWJvOZVsJzhRclc8T1gjkA
3HG3ZL+UGjt6d3SyvsVTx1uHs7UWHh3M5ag5sBePGgu1COpTcC/iPfoOj/ex
0s8A77duvseBwtOSORvcjXwEv5iS9e7ewbmKmgB706i5UCug5sLeGmrY1GJ2
Sb4WNU78XPY/oZ3Z43asjndM9ueo0eJHd0/mnnhc+Fm7o2cL13ip9aJv21Tm
mOiTYcn+ODVu9D0aFa3KPcJ3VtZoSl8Tvfyyzq1WmlPAfxrmd878n57sAeAF
8Jszsv7uUJnDraytJ2vZrplLDk/246kR4yeMSPavqVFTqx4SzY/hvHDfvZP9
FTwuvK59kv0LPCq8KjQVXGzfYK21VzRXRXNNyFwC7UxMIm7BOeBqe1TmIveX
1rpwJOqpcDS4Vq/K3K1lsHYi5pIH8RbQfnDSTXT8d7R2gwPCBfdK1h54iniL
eAtoQzh3Wx3/GK2Ftsnc4aTo2AAnhhufHF1PQdOh7S7TZ6/SHBdePyjZn2JP
CP5Tp2DuTXwmThOTRuW1SCzrmuy/oOnQdpdG5wZyBLWzkcl+Fh4hXuHP0Vwd
DgIX+T5aG/bOz2Nocj2EPRz4RSlZ64/MzxOOAtfduTJ3wYOdX3qN4c0ujdZ6
xFRiK5qVvQMLg//vnsl+H54h3uGy5PoWfBh+imbAr7gm+Hntm+xf4ZE2zXMR
LUGMnqUxU6NzN5oX7fs7HCPz3fbk5pj95Hy/D5TW2uQn8tROyf4heySoJ6GZ
yaV3BV9vgD63KJ3jK12jW7LWQhMST7hnfuvf4P+yc7L/SE2XetS30VoZjg/X
/ytzmSeCucevGt9Wxzfq3Po5n8IdFgd7G2gOuOLAPP+oCbM3D8+aWvE+lb15
7gkdSE2WvX943NRqf6ycq+7X9d5GTwr3Ez5H+NHkeuPxhfcwsF/h3OhcTc6m
PsQ9EWu/Cr7Xa6LvlRo39Zuro2vx7EFgLwK/8Y++e1rh314QzQ3hiNR/jo2u
lxEfqH/MF76mcE2f2v5x0fU/9mhRD4GzDsy5gVx8ZHS9hJo49Zv+yd4kHi5e
7uDoWI7GRmsfEV1v4X1Qzzk8+v9Ts6d+sqjy/rdT4QjCx0TvvWKPB/Ww4+FI
hfeIUU/imb1UegzPkmdGnZCaLc8S7o8WRY/8Ecxpdsm5Em6G54V3tXtlL2xW
dO6khk0te2b03g72KLBX4ZLo2jZ7Ptj7QY7l2T6Tc+/F0VwJzsTeBPxX9goT
069QuyB6bwR7KNhLcX70Xgr2aLBX4yLhswrvcWCvQ6/ktYxnjnd+XvReDkQ1
9cT5WUuwduB686L3nrDnhL0neHh4h8Mqe3tzo7kzHJq9J80z7pbjQ/s8n34N
XrtHC+9UeI8C9a4+yV4EHjp+eIv8ez3zemqZ51+fHG+fSI4txBhqCwvz+kQD
U0vC0+hT2OPB6+iX7KXjceN1HxVdP2RPBPU9OAvcBQ5yQTIngZuQg/B3pkfv
LWEPD/XwU6Lr4+xhYy/bhOj6KnyL+t+06L0+7Jmhnn5qdH2cPXDshTtReHzh
PYhL8u93rJyP4FKnRdfn2ePHXr8TYt4rVrr+zBx+tPQcZ26zx/O20nOcvZ+7
JtcDmd/UW86Irgezh5C9hOxhYK8v9XH2NpweHT/Yc8jeQzQrWrhvzh8zovfa
sMeG+j57Pti7zR4X9oJMit4rxB4m9jL1Teay1DCoZeyRXO+hRkWtanL0XiP2
GLHXiHfIWrsi+N3CAeGCcMTzdDwleq8Se5TYq3Rm9F4s9jCxl2lgcn2LPWnU
k9B0aDs8H/zTmVkrHxSspSdG18/Zo/hC/r12lfM7XJQ9LNSiqSdRa8QzY34e
HMx/zolen+xBYv8E+4lXePkUZ+vc/wHlYwy7
          "]], Polygon3DBox[CompressedData["
1:eJwt13m8V3Mex/Hb7/7uHaksJSOVxGSrhhkUKiJlDxGyi7IrEc2gQoqkPS2U
yE5SkV1J1hAqIntkiSxhkGWe78e5f7wf57xf5/0963f5nOY9+3S7oFRRUfE6
VdGMckXFR0ADupFvyL9ZWVHxBh0ncDf+ou2+NMj+M7UqKhbQ4/zNsm9gZRqm
bTU/lZbzG9AIrA5/jOxt/Kfa9cZedO5DsbHYMuwY7DFsuuz72CY0DqvPHyY3
iX9X7iRsvtwh2BhsKdYdexR7i5bT8Y7d69jLtrdq/4H9TWm8XAN+Gr3F16Yb
sLr8Mu2WUg9t7sFfyv3iH9qvTxPkNuM74pfxT7luR+x2bU7E7sfWYt/QYv5V
/BWap81auUdsX+eX0LGO3yX/gu0t+Nv2N6SRcvX4s/DFfD0ahf2lzT5YP/4h
52+D3YSdib2M1aU6tIrfWfv5jv+P319mLLY39hpW4jvTOGxP6ilzu/Nt59gI
/AJsJdaUbsE21u5C7At+J9qR1vF9aJX9FnS33BZyfbFP+e3oHqwRdj72Lt+E
pmEbYRtiHVzzFNfbJe8I60CvOl6LP4ImyoynLvYPqCyeJ8/1kf0P6VTHHnTO
JbYn4aemv+AN5K61PQN/AvvDdX6nFfyNdHD6Tb6B3D7pF/bfp1McmyX/mu0n
/Md0mv3Z2OtVRX9Lv5vIb25/eJ7VdhX1tD8Hf8N2Ah2IHVRZvO+895uxYzOO
cu9YV+wQei/9DjuSJslUUY98H+d6M+Mo56KRuQfPsCRjju9EV2LP8p3l7sn1
sFG5B+wobB7WBRuOvYIdjs3Ju8Sux17FjsDmYvthg7GF2P7Y3djB2OjcB3Z0
+i7WAeuLzcFm05z0K7oQm8vvLjdF7jzsHawxbUlf853pOvuL5brKzZabgh1l
e3S+AXZouVD262HdaLLMubQs750mO1Zb5qaMJb6ShmYOC5Prrs0x9AF2GNYP
+1KmJc3EmmLvOv5OvqdjM/N+bN/jV9LJ9h/I+6kqnmNFzbjK+Nqu2vvBrrK/
yHN0cb57c48ZW1gtGoJV8muovWPNM76wr/nDtZ3Cv5e+jz3j+OXYr1g7eg7b
Te40Op0fI9cIGyl3mdzP2B6Zd7DWMoOxP/h9Mldhe2JXYL/x7el5rA3Wk87I
XOp8W2KjnO867OF8n3wvbI3t6VivzHNyjbHRWN+cE3sQ2w27C9vJNc7mL7K/
A43k61FHbCa1xVZo1zrvkL+Yb0WjM2/glzvfLHxX57sTH4ivxzpkPsTayvwX
+4lvS09irbD/YD/ybWh3+okfQN/b35Uek9tR7qosaOnX6W9222En0En8JNfd
CBuSORjrgY3GNsQG571oW8e2a9Ya7CCZYdgGmTewFdgB2PF0YtZKbethVzs+
Nc+XOZR2xm7LmE9WbqxcHezKmnHUB7sNm0G/8P1pLbYLzZNrod0l2Lf8v+gR
bHvsUuw7/t/0KLYDNgj7nd87azS2B3Yl9he/L3WknzO35D1kDXTNunJXuZdz
8KVYQzo8352/SO6anJ9vJ/dA1lVsY/5+qs/P4ofbNkxftP0njdG2Fz2rbVXG
v+wquSOpO98v6xW2vcw52EXYnfyOzjG1spjrbigVdUXqi0rjrTe2CKvOGoJ9
mrGBPZRnyvigj2v6xrqa9Snr1K7arnDOt+kEx+4rFWtyt9Qh9vvivbLuVRXv
6s+aPpW+1UHb6xzfLP0p/Z1Gpc/Tm45vlvVR28+c61y6mL+L30l+WmoBbKus
z5kTsw6Ui7ppYKlm3syalLGB98/6ybeUv0X2/Hz3rJ9YK2x6+lO+O3Yv1hq7
Fdsr94Pdl/5MS7NO09XpP/yecvfL9cOGpP9ge2Ez8w2w87K+Y9tmTcsalDqu
VKwxWWvqeQdnZf3GpvP/kJsk1zu1Sal4tjzjuJoa5KVSsc5mvd1W27PlUmDe
yreQmyzXVu5k7OaMhVwn8w2dmXmdbyo3Nms31hubiDXBxmDt0mdKRf9LP1wu
0xWbjK3kT5ZbINcmay02slZRY6TWuJrKWfvwZXKdtL2TfuB3yDmxlvxKaqDN
S9RQ/qH0K5oh8xbWQ+5lvElVMVYyZrbmF2S+otv5t/Hj5Rbj/bER2HysE/Zw
ZVFLfV6zLmZ9bOldrZNrIbMzv43MopyLPuO3yPvStnH6AI3PHCl7MPak7B3Y
aqwRTcWa8ANoQuYCuUOwpyqLZ86zV9rflm5wH6vLRT9Of26GPc1PoSV8ia6R
L/OTUpuVUjx6l9nwE+lFfr32g7A/te+eWhtbhfXCXkjtKfcM9iN2KfZzTV+b
in2IfUCL+HFyCzOn8wNSu6YOxG/C3sdOxRZmjpFbgK3DLsF+wi7BxmW9ww7C
nkhNoe107BPsDOx57KjU2tjH2OnYc9iN2r6A/YYNxP7AJmDPY79iV2C/Y+Ox
57BfsMux9djFzrcGa531DGuWOQ37im9FD2BbYd2wafxH2vbEFmk7FPtb6qz0
GayL3OeZNzJ+sOaOLeS/zf+G/W2wO+S+y/pWLmqUptVF7Zoa9sSaOa4RtiU1
psHl4h9oi+piHsx8OLBc/MttXl386+Sfp31qrFKxdmcNr5sxUy7q4a2qi3o7
dfegcvFf9Pfq4h8r/1rXyta2PRR/x/0dmLWnXNRVTaqLmiq11ZDUt5nj8eVy
+2eNwapTu2Z8YZ0zl9LQrOXuoz02K7Uatmn+NakBPzs1HNXnn0j/xeaWi5r/
8VLx/5X/sG1cfzQ+H/uB7+98P6Y+xI7DBtivjQ3K/ZWL/4lm1UXtn3+AX1OP
Zp3I3JHrpMbGnpb7PnWNtuscG47Nw77Ezk+thw3D5mKrsbOxz7Hvsf1se2Y8
4ptkvcMek/ua7yv3rWPXY49gX2EXYN9g6zPfZf7NO8zck/8C7Cm571KLyf3g
2BXl4r+yYXXx755/+BHYo9gauT5ya7EvsD1st8ZnYF/y39De2GmpnTLPusbQ
cvFv09z5PsNX0zXl4r9o6+ri/yf/Qf8H5pAamA==
          "]], 
         Polygon3DBox[{{1148, 678, 792, 1420, 975, 976}, {1336, 609, 419, 418,
           819, 1229}, {1147, 677, 791, 1419, 972, 973}}]}],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0s9Lk3EcwPHvcpotrS7iTR2Et7zkwsA6eMhsa615iW1IrBAS/F0rQbpp
AxUiZYk3D3XtUkdPdgsKKrXsl56S/oEQPPR66PDZ6/2BZ99nPM+S5fH8WCyE
8MzcF1Hf9XHEx3UhnOE827nCLrbVh3DLNZd0uy7ojO7QJV3UST2k3/vOiP22
/qNndFkf6qq+oxvjITzXrXzJTr5him8Zd9YF11XMJ/skU+bKsRA+2/u5xavc
5gB3eI1fmOZXZnjd7Oosv/EGvzPHH7zJn8zzFwe5x6Lf2+OeD82+fZpZk/Mb
P9q7dZ/e1Of5mmf5gi2ssYFP+NdZj3jA3+aefscCN5jmK/Zynee4zDZ+cEbC
vR6Y0/YpXjZr5pR9lc2ssSl6ZzwZvV8m+JQnOOu8uejZ64qe0EvmuH2ci6ZB
j3LBeAVhhPHo+bt+WCNU6RGFkuVi7P9/6B+zFEDU
       "]]}, 
     {GrayLevel[0.2], 
      Line3DBox[{894, 1222, 1223, 596, 893, 1224, 1225, 1628, 1105, 1319, 
       1320, 1321, 1226, 1629, 1106, 1318, 1323, 1324, 1287, 1107, 1322, 1422,
        1438, 1288, 1108, 1325, 1424, 1439, 1289, 1109, 1326, 1654, 1228, 
       1290, 1334, 1630, 1333, 1332, 1440, 1110, 895, 1441, 1111, 896, 1442, 
       1112, 897, 1443, 1113, 898, 1444, 1114, 899, 1445, 1115, 900, 1633, 
       1230, 1116, 1231}], 
      Line3DBox[{902, 1191, 1232, 1335, 1612, 901, 1192, 1233, 607, 903, 1193,
        1291, 1647, 1117, 904, 1227, 1446, 1118, 905, 1423, 1447, 1119, 906, 
       1425, 1448, 1120, 907, 1632, 1229, 1336, 1631, 908, 1337, 1527, 909, 
       1449, 1121, 910, 1450, 1122, 911, 1451, 1123, 912, 1452, 1124, 913, 
       1453, 1125, 914, 1454, 1126, 915}], 
      Line3DBox[{916, 1194, 1235, 1338, 1613, 1309, 1195, 1237, 1339, 1614, 
       917, 1234, 1292, 1340, 1634, 918, 1455, 1127, 919, 1456, 1128, 920, 
       1457, 1129, 921, 1458, 1341, 1528, 922, 1342, 1529, 923, 1343, 1530, 
       924, 1459, 1130, 925, 1460, 1131, 926, 1461, 1132, 927, 1462, 1133, 
       928, 1463, 1134, 929}], 
      Line3DBox[{943, 1140, 1470, 942, 1139, 1469, 941, 1138, 1468, 940, 1137,
        1467, 939, 1535, 1348, 938, 1534, 1347, 937, 1533, 1346, 936, 1532, 
       1345, 1466, 935, 1136, 1465, 934, 1135, 1464, 933, 1531, 1344, 932, 
       1635, 1240, 1293, 1239, 931, 1615, 1199, 1238, 1198, 930, 1437, 1653, 
       1197, 1236, 1196, 1310}], 
      Line3DBox[{957, 1144, 1475, 956, 1143, 1474, 955, 1142, 1473, 954, 1543,
        1356, 953, 1542, 1355, 952, 1541, 1354, 951, 1540, 1353, 950, 1539, 
       1352, 1472, 949, 1141, 1471, 948, 1538, 1351, 947, 1537, 1350, 946, 
       1536, 1349, 945, 1617, 1203, 1242, 1202, 944, 1616, 1201, 1241, 1200, 
       1327, 1311}], 
      Line3DBox[{971, 1146, 1478, 970, 1145, 1477, 969, 1554, 1366, 968, 1553,
        1365, 967, 1552, 1364, 966, 1551, 1363, 965, 1550, 1362, 964, 1549, 
       1361, 1476, 963, 1548, 1360, 962, 1547, 1359, 961, 1546, 1358, 960, 
       1545, 1357, 959, 1418, 1544, 1244, 1205, 958, 1618, 1204, 1243, 1329, 
       1328, 1312}], 
      Line3DBox[{974, 1314, 1315, 1247, 1636, 1147, 973, 1207, 1248, 1637, 
       1148, 976, 1479, 1149, 978, 1480, 1150, 980, 1481, 1151, 982, 1482, 
       1152, 984, 1483, 1372, 1563, 986, 1484, 1153, 988, 1485, 1154, 990, 
       1486, 1155, 992, 1487, 1156, 994, 1488, 1157, 996, 1489, 1158, 998, 
       1491, 1160, 1000}], 
      Line3DBox[{999, 1159, 1490, 997, 1569, 1378, 995, 1568, 1377, 993, 1567,
        1376, 991, 1566, 1375, 989, 1565, 1374, 987, 1564, 1373, 985, 1562, 
       1561, 1371, 983, 1560, 1370, 981, 1559, 1369, 979, 1558, 1368, 977, 
       1557, 1367, 975, 1420, 1556, 1246, 1206, 972, 1419, 1555, 1245, 1331, 
       1330, 1313}], 
      Line3DBox[{1002, 1316, 1317, 1249, 1379, 1619, 1001, 1208, 1250, 1638, 
       1161, 1003, 1492, 1162, 1004, 1493, 1163, 1005, 1494, 1164, 1006, 1495,
        1165, 1007, 1496, 1380, 1570, 1008, 700, 1009, 1497, 1166, 1010, 1498,
        1167, 1011, 1499, 1168, 1012, 1500, 1169, 1013, 1501, 1170, 1014, 
       1502, 1171, 1015}], 
      Line3DBox[{1017, 1209, 1251, 1381, 1620, 1016, 1210, 1252, 1382, 1621, 
       1018, 1503, 1172, 1019, 1504, 1173, 1020, 1505, 1174, 1021, 1506, 1175,
        1022, 1507, 1383, 1571, 1023, 1384, 1572, 1024, 716, 1025, 1508, 1176,
        1026, 1509, 1177, 1027, 1510, 1178, 1028, 1511, 1179, 1029, 1512, 
       1180, 1030}], 
      Line3DBox[{1032, 1211, 1253, 1385, 1622, 1031, 1212, 1307, 1386, 1623, 
       1033, 1387, 1573, 1034, 1513, 1181, 1035, 1514, 1182, 1036, 1515, 1183,
        1037, 1516, 1388, 1574, 1038, 1389, 1575, 1039, 1390, 1576, 1040, 732,
        1041, 1517, 1184, 1042, 1518, 1185, 1043, 1519, 1186, 1044, 1520, 
       1187, 1045}], 
      Line3DBox[{1047, 1213, 1254, 1214, 1624, 1046, 1215, 1308, 1216, 1625, 
       1048, 1391, 1577, 1049, 1392, 1578, 1050, 1521, 1188, 1051, 1522, 1189,
        1052, 1523, 1393, 1579, 1053, 1394, 1580, 1054, 1395, 1581, 1055, 
       1396, 1582, 1056, 748, 1057, 1639, 1256, 1257, 1058, 1640, 1259, 1260, 
       1059, 1642, 1263, 1264, 1060}], 
      Line3DBox[{1062, 1217, 1255, 1218, 1626, 1061, 1397, 1583, 1063, 1398, 
       1584, 1064, 1399, 1585, 1065, 1400, 1586, 1066, 1524, 1190, 1067, 1525,
        1401, 1587, 1068, 1402, 1588, 1069, 1403, 1589, 1070, 1268, 1590, 
       1426, 1071, 1428, 1591, 1270, 1072, 826, 1294, 1258, 1073, 1641, 1261, 
       1295, 1262, 1074, 1643, 1265, 1296, 1266, 1075}], 
      Line3DBox[{1077, 1219, 1267, 1220, 1627, 1076, 1404, 1592, 1078, 1405, 
       1593, 1079, 1406, 1594, 1080, 1407, 1595, 1081, 1408, 1596, 1082, 1526,
        1409, 1597, 1083, 1410, 1598, 1084, 1278, 1599, 1431, 1085, 1269, 
       1297, 1600, 1427, 1086, 1429, 1648, 1298, 1271, 1087, 1430, 1649, 1299,
        1272, 1088, 1644, 1273, 1300, 1274, 1089, 1645, 1275, 1301, 1276, 
       1090}], Line3DBox[{1104, 1286, 1285, 1646, 1103, 1283, 1306, 1652, 
       1436, 1102, 1282, 1305, 1651, 1435, 1101, 1281, 1304, 1650, 1434, 1100,
        1433, 1611, 1303, 1280, 1099, 1432, 1610, 1302, 1279, 1098, 1609, 
       1417, 1097, 1608, 1607, 1416, 1096, 1606, 1415, 1095, 1605, 1414, 1094,
        1604, 1413, 1093, 1603, 1412, 1092, 1602, 1411, 1091, 1421, 1601, 
       1277, 1221, 1284}]}, 
     {GrayLevel[0.2], 
      Line3DBox[{392, 805, 882, 597, 1628, 393, 783, 607, 413, 785, 1614, 618,
        428, 786, 1615, 633, 443, 788, 1617, 648, 458, 1544, 790, 663, 473, 
       1556, 792, 678, 1637, 488, 794, 693, 1638, 503, 796, 1621, 708, 518, 
       798, 1623, 723, 533, 800, 1625, 738, 548, 1583, 750, 560, 1592, 761, 
       571, 1602, 772, 583}], 
      Line3DBox[{362, 257, 1287, 314, 258, 1446, 415, 620, 1455, 430, 1531, 
       635, 445, 1537, 650, 460, 1546, 665, 475, 1558, 680, 1480, 490, 695, 
       1493, 505, 710, 1504, 520, 725, 1513, 535, 1578, 740, 550, 1585, 752, 
       562, 1594, 763, 573, 1604, 774, 585}], 
      Line3DBox[{395, 807, 883, 808, 1438, 861, 809, 810, 1447, 416, 621, 
       1456, 431, 636, 1464, 446, 1538, 651, 461, 1547, 666, 476, 1559, 681, 
       1481, 491, 696, 1494, 506, 711, 1505, 521, 726, 1514, 536, 741, 1521, 
       551, 1586, 753, 563, 1595, 764, 574, 1605, 775, 586}], 
      Line3DBox[{396, 811, 884, 812, 1439, 862, 813, 814, 1448, 417, 622, 
       1457, 432, 637, 1465, 447, 652, 1471, 462, 1548, 667, 477, 1560, 682, 
       1482, 492, 697, 1495, 507, 712, 1506, 522, 727, 1515, 537, 742, 1522, 
       552, 754, 1524, 564, 1596, 765, 575, 1606, 776, 587}], 
      Line3DBox[{397, 815, 885, 1654, 816, 863, 817, 1632, 819, 418, 623, 
       1458, 433, 638, 1466, 448, 653, 1472, 463, 668, 1476, 478, 1561, 683, 
       1483, 493, 698, 1496, 508, 713, 1507, 523, 728, 1516, 538, 743, 1523, 
       553, 755, 1525, 565, 766, 1526, 576, 1607, 777, 588}], 
      Line3DBox[{400, 601, 1441, 401, 611, 1449, 421, 1530, 626, 436, 1534, 
       641, 451, 1541, 656, 466, 1551, 671, 481, 1565, 686, 1485, 496, 701, 
       1497, 511, 716, 526, 1576, 731, 541, 1581, 746, 556, 1589, 758, 568, 
       1599, 848, 769, 579, 1610, 849, 780, 591}], 
      Line3DBox[{402, 602, 1442, 403, 612, 1450, 422, 627, 1459, 437, 1535, 
       642, 452, 1542, 657, 467, 1552, 672, 482, 1566, 687, 1486, 497, 702, 
       1498, 512, 717, 1508, 527, 732, 542, 1582, 747, 557, 1590, 836, 759, 
       569, 1600, 837, 770, 580, 1611, 850, 781, 592}], 
      Line3DBox[{404, 603, 1443, 405, 613, 1451, 423, 628, 1460, 438, 643, 
       1467, 453, 1543, 658, 468, 1553, 673, 483, 1567, 688, 1487, 498, 703, 
       1499, 513, 718, 1509, 528, 733, 1517, 543, 748, 558, 1591, 838, 839, 
       867, 1648, 840, 841, 871, 1650, 851, 852, 593}], 
      Line3DBox[{406, 604, 1444, 407, 614, 1452, 424, 629, 1461, 439, 644, 
       1468, 454, 659, 1473, 469, 1554, 674, 484, 1568, 689, 1488, 499, 704, 
       1500, 514, 719, 1510, 529, 734, 1518, 544, 824, 1639, 825, 864, 826, 
       827, 868, 1649, 842, 843, 872, 1651, 853, 854, 594}], 
      Line3DBox[{408, 605, 1445, 409, 615, 1453, 425, 630, 1462, 440, 645, 
       1469, 455, 660, 1474, 470, 675, 1477, 485, 1569, 690, 1489, 500, 705, 
       1501, 515, 720, 1511, 530, 735, 1519, 545, 828, 1640, 829, 865, 830, 
       1641, 831, 869, 844, 1644, 845, 873, 1652, 855, 856, 595}], 
      Line3DBox[{410, 820, 1633, 821, 411, 616, 1454, 426, 631, 1463, 441, 
       646, 1470, 456, 661, 1475, 471, 676, 1478, 486, 691, 1490, 1491, 501, 
       706, 1502, 516, 721, 1512, 531, 736, 1520, 546, 832, 1642, 833, 866, 
       834, 1643, 835, 870, 846, 1645, 847, 581, 857, 1646, 858, 859}], 
      Line3DBox[{582, 771, 803, 1601, 570, 760, 1627, 802, 559, 749, 1626, 
       801, 547, 737, 1624, 799, 532, 722, 1622, 797, 517, 707, 1620, 795, 
       502, 692, 1619, 793, 487, 1636, 677, 791, 1555, 472, 662, 1618, 789, 
       457, 647, 1616, 787, 442, 632, 877, 1653, 879, 878, 427, 617, 1613, 
       874, 876, 875, 412, 606, 1612, 782, 391, 596, 804, 860}], 
      Line3DBox[{584, 773, 1603, 572, 762, 1593, 561, 751, 1584, 549, 739, 
       1577, 534, 724, 1573, 519, 1503, 709, 504, 1492, 694, 489, 1479, 679, 
       1557, 474, 664, 1545, 459, 649, 1536, 444, 634, 1635, 823, 429, 619, 
       1634, 822, 414, 1647, 608, 784, 394, 1629, 598, 880, 806, 887, 881}], 
      Line3DBox[{589, 778, 1608, 577, 767, 1597, 566, 756, 1587, 554, 744, 
       1579, 539, 729, 1574, 524, 714, 1571, 509, 699, 1570, 494, 684, 1563, 
       1562, 479, 669, 1549, 464, 654, 1539, 449, 639, 1532, 434, 624, 1528, 
       419, 609, 1631, 818, 398, 599, 1630, 889, 891, 890, 886}], 
      Line3DBox[{590, 779, 1609, 578, 768, 1598, 567, 757, 1588, 555, 745, 
       1580, 540, 730, 1575, 525, 715, 1572, 510, 700, 495, 1484, 685, 1564, 
       480, 670, 1550, 465, 655, 1540, 450, 640, 1533, 435, 625, 1529, 420, 
       610, 1527, 399, 1440, 600, 888, 892}]}, {}, {}}},
   VertexNormals->CompressedData["
1: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
v2PTlf++PjN2/Qzs8w3Y50nY5/FSj/+7H7vm0V0DRfap8qvnXv93PzbhyqaA
qiIC+OhtVnA+1g15iuKPihQJaJR2j70gkwicJonHpY7lg4uN08BzKyJydrf6
cm9bE8xcuRpqU0iFZxluwwuxDajFUmFbaHs99J2OdcyhUiH3/rVWcb86ZLTT
LKRLuA7eXOxWuc9LA7U15qWtyzXoeLq6AGNHDfy7KFX9RZYG7AoNttFl1eiV
WSVbVG01LCk/JP3UpEHTxR9T6vVV6Idd0LdoahWYsxVleV+lwb2/Y8QPDFWo
Ur3hczs978o0JURV2o7DmN/DVv/oSSS/SdlJf5AI1RGr28bdqsE77ziONkxA
FnHL5N74EeDqurf+jHsW5Knliyf8B5HhbNCBc9HdoML7iehHJcMO0YKvKcs4
VFV848BT51Yokvde/OZJhewpJ8vf6w0osdko/8fmOtgroW3sIUeDO8+Spbnk
q5AWz/UPT+l5xd4M2Tx5Hxq40XWp/KcSpJjpJHP+dQm8f3lgHymXBsb8DyV3
pucjPU0v30OlBaCEr5K2bKHBpyvMsspuOUg50XtA7Mg3uPNaUHxsiAYBKa+G
GyfT0aIe31Pu59lw7VZCJRBo0D7/Z9MVnRRkssvuTXJ5OrzY3LDzGpme54xy
+TyuSkBKnftD8m+mQl2aO5qYp0GH2njD599xqP9CZGvKlyRwzRFXEFqkf74l
2dLJKQbZZs9Yqd1KgGt+s2zPl2mQxZgweB73CXEfPlJNE5yGxvPU0YlvTaAY
6mxZt5uA9D/8LHTpG4Bo/Ld9j2+S4MTMparn1d0oOOJjL1s4DjrcpG96bKMC
UTnzal5LE+puO/GTdL8RpLcdIlC30CAjReBCqE0VYiuxGTK7Uw1PVsUNop7Q
YM/r+68J08XorVnP9nf4cliVqf9rnUqj69ETRumheeibK2EZ7IsgwLz3dlod
DWrW23/cvJqNTrtaHut/mQ/I8ghd99Lg0Lu2rKqkNLRpv2I6LSAX7CfSLTMn
aSB+o+w8Xj0JkSKDvGa1s8Eg8kNaGz1/c3fhchSa/4I8Bie//JxPB8HvRrn5
VBo0uqeJ25vFIldDTk+7LWmQzHTVR2GBBmH3J6mvkz+jPt4Oi2/RyaDYIPqz
ij6eW+dZuAhmEciVe1k0JCoRtrlyfc2ij+fKnrICpfQPyBHzxy1i/rgbmD/u
+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
V3MnYijXyJDJ/+OB99E+uJ29ZLA9ohPhyD1+e+fJYPQqwfZ4SBfoZ9/eVMfZ
hQiibJHDZ8lA/iFew3mzA4qm8yX6OAfQLNYf6IL1B+pg/YH6fuNf9O5SoMXw
JJeXVgeY/3OTE6frerNbQ5qmi/3QeONm3Pkfc7B4N/KK+Ggfkq5/zMNY2gk1
6ha7HM5QoM+746tNHQ6ZCuibWka1gNp797YHDlTIaETLodQmFHwy7N078zqI
1f8u2LWdnm/LFqUzz9agvJlvIqrb+sFFQlXdJJ8E3FTNH/KSPUh8wkbTYqQb
kg9ToU2cAhe97Cu91ToQ94Z17ym27kHslY8ZkXioFO22yAieBuMdrz71eTeh
RIryiwr6Ov695rFLAH3fubJPtUBPqgWp3d5iEr9Ef04ZNwyuMxAg8eHdX7y9
rWgtXOpiRR0RcJbqnzTVCHDeBC2zXWj9r7xd+A9lGsTvpd850zgFFvXXaqd/
tiFWv6eqNjyzsLlMkPui+CRE4k5ccdLpQC0yZn6z4nNgvLb5eLbZOLiI9rZX
bMehlfiGkZBdJCg/+YPtGe8IBOEkVLwrcSipgqbqfnQWHtTf8ti3PAH939SY
Lml0oMX6QqWjp+l55NP7Qfulx2HgzUDaXnYc6gu3k3Q4QYJl94Mdaq+G4W1w
3XftWhzyfi/3e5mLDPGOPOmHkvvhb+3VKfl7nWiLxzOBT0Vk4KbEiiTMd8PC
ngMUZkInWpccapTSwIO76lWPLxbTEPrIOcFduQPxYPkJ34bf4yiNCz1kRpiE
hLDHXbxyeDgzJs6GExhHNzbwqJ9iPGrNz8LZJ4an4cDKqPXSoU4o3WKbKH9+
CiULscmnXZuBrn/fy3c6dQEl86y0mukk+q6TWjXbMwPJruaW0se64fOL3hh9
pwkkjJ3vf8PO93dg5/tPsP3FDdtf3mD7C60hwVDJaRZify2w3lXvh55+t4jd
KqNIjuzNamE5A+36x/gqZMYgePrDI3GlIVTgYHn/fgM9j722PeUF0yzs6yG7
H0wYQjF4U0UXf3pe+jezVXRmEnYNm2seXZ5ACRE8j3aSJgAYs7VIHHhYCVHG
xRtOoINBHw+nd46DzhatttA+AoxV1VJbT42jgVNnc9gieiD0nZkL7jIZQlwc
rjGHdCNvH8b9DYeHIO6Mnujd8VnYtn3N7DHnIKrkWJXNvDgAHctRN/wa5sA3
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
x/OLnnD1/Si47/cXcqlXGw==
    "]],
  AutomaticImageSize->True,
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  ImageSize->{335.065266353839, 177.3916936661748},
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{{0, 10}, {0, 1}, {0., 30.964222889318457`}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{3.0809632165352965`, -1.1523258341111926`, 0.793606218723373},
  ViewVertical->{0., 0., 1.}]], "Output",
 CellChangeTimes->{3.670161746662962*^9, 3.670161843308337*^9, 
  3.6701618873566775`*^9},ImageCache->GraphicsData["CompressedBitmap", "\<\
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
4Nz1v3dJl/y9KB1d8R8C6nI5\
\>"]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NSolve", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox["x", "2"], "\[Equal]", 
    RowBox[{"Exp", "[", 
     RowBox[{"-", 
      SuperscriptBox["x", "2"]}], "]"}]}], ",", 
   RowBox[{"{", "x", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6701652313470984`*^9, 3.670165284190297*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"NSolve", "::", "ifun"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Inverse functions are being used by \[NoBreak]\\!\\(NSolve\
\\)\[NoBreak], so some solutions may not be found; use Reduce for complete \
solution information. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/NSolve\\\", ButtonNote -> \\\"NSolve::ifun\\\"]\\)\
\"\>"}]], "Message", "MSG",
 CellChangeTimes->{{3.670165251407461*^9, 3.6701652857323246`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"-", "0.7530891649796748`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "0.7530891649796748`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.670165251410463*^9, 3.6701652857573404`*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.6707734818927846`*^9, 3.6707734823080635`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["27/04/2016", "Subsubsection",
 CellChangeTimes->{{3.670773489893128*^9, 3.670773493668649*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"p0", "=", 
   RowBox[{"Exp", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"-", 
       FractionBox[
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"\[Alpha]", "+", "1"}], ")"}], "2"], "2"]}], 
      SuperscriptBox["x", "2"]}], "-", 
     RowBox[{
      FractionBox[
       RowBox[{"\[Alpha]", 
        RowBox[{"(", 
         RowBox[{"\[Alpha]", "+", "1"}], ")"}]}], "2"], 
      SuperscriptBox["y", "2"]}], "+", 
     RowBox[{"\[Alpha]", 
      RowBox[{"(", 
       RowBox[{"\[Alpha]", "+", "1"}], ")"}], "x", " ", "y"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dp", "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"l", "+", 
      RowBox[{"m", " ", "x"}], "+", 
      RowBox[{"n", " ", "y"}], "+", 
      RowBox[{"r", " ", 
       SuperscriptBox["x", "2"]}], "+", 
      RowBox[{"s", " ", 
       SuperscriptBox["y", "2"]}], "+", 
      RowBox[{"t", " ", "x", " ", "y"}]}], ")"}], "p0"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"-", 
      SuperscriptBox["\[Alpha]", "2"]}], 
     RowBox[{"D", "[", 
      RowBox[{
       RowBox[{"x", " ", "p0"}], ",", "x"}], "]"}]}], "-", 
    RowBox[{
     SuperscriptBox["\[Alpha]", "2"], 
     RowBox[{"D", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"y", "-", "x"}], ")"}], "dp"}], ",", "x"}], "]"}]}], "+", 
    RowBox[{"\[Alpha]", " ", 
     RowBox[{"D", "[", 
      RowBox[{
       RowBox[{"y", " ", "dp"}], ",", "y"}], "]"}]}], "+", 
    RowBox[{"D", "[", 
     RowBox[{"dp", ",", 
      RowBox[{"{", 
       RowBox[{"y", ",", "2"}], "}"}]}], "]"}]}], "//", "Simplify"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"%", "/", "p0"}], "//", "Simplify"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"pol", "=", 
  RowBox[{"Collect", "[", 
   RowBox[{
    RowBox[{"%", "//", "Expand"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "y"}], "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.670773497655312*^9, 3.670773631241521*^9}, {
   3.6707737417613277`*^9, 3.670773742932108*^9}, {3.670773823072628*^9, 
   3.6707738330262747`*^9}, 3.6707739348032417`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"2", " ", "s"}], "-", 
  SuperscriptBox["\[Alpha]", "2"], "+", 
  RowBox[{"y", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "n"}], " ", "\[Alpha]"}], "-", 
     RowBox[{"m", " ", 
      SuperscriptBox["\[Alpha]", "2"]}], "-", 
     RowBox[{"2", " ", "n", " ", 
      SuperscriptBox["\[Alpha]", "2"]}]}], ")"}]}], "+", 
  RowBox[{
   SuperscriptBox["y", "2"], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "2"}], " ", "s", " ", "\[Alpha]"}], "-", 
     RowBox[{"4", " ", "s", " ", 
      SuperscriptBox["\[Alpha]", "2"]}], "-", 
     RowBox[{"t", " ", 
      SuperscriptBox["\[Alpha]", "2"]}]}], ")"}]}], "+", 
  RowBox[{
   SuperscriptBox["x", "2"], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"2", " ", "t", " ", "\[Alpha]"}], "+", 
     SuperscriptBox["\[Alpha]", "2"], "+", 
     RowBox[{"2", " ", "r", " ", 
      SuperscriptBox["\[Alpha]", "2"]}], "+", 
     RowBox[{"2", " ", "t", " ", 
      SuperscriptBox["\[Alpha]", "2"]}], "+", 
     RowBox[{"2", " ", 
      SuperscriptBox["\[Alpha]", "3"]}], "+", 
     SuperscriptBox["\[Alpha]", "4"]}], ")"}]}], "+", 
  RowBox[{"x", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"2", " ", "n", " ", "\[Alpha]"}], "+", 
     RowBox[{"m", " ", 
      SuperscriptBox["\[Alpha]", "2"]}], "+", 
     RowBox[{"2", " ", "n", " ", 
      SuperscriptBox["\[Alpha]", "2"]}], "+", 
     RowBox[{"y", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"4", " ", "s", " ", "\[Alpha]"}], "-", 
        RowBox[{"t", " ", "\[Alpha]"}], "-", 
        RowBox[{"2", " ", "r", " ", 
         SuperscriptBox["\[Alpha]", "2"]}], "+", 
        RowBox[{"4", " ", "s", " ", 
         SuperscriptBox["\[Alpha]", "2"]}], "-", 
        RowBox[{"t", " ", 
         SuperscriptBox["\[Alpha]", "2"]}], "-", 
        SuperscriptBox["\[Alpha]", "3"], "-", 
        SuperscriptBox["\[Alpha]", "4"]}], ")"}]}]}], ")"}]}]}]], "Output",
 CellChangeTimes->{{3.670773600606063*^9, 3.6707736316638026`*^9}, 
   3.670773744593219*^9, 3.6707738410436287`*^9, 3.670773937458015*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"2", " ", "s"}], "-", 
        SuperscriptBox["\[Alpha]", "2"]}], ",", "\[IndentingNewLine]", 
       RowBox[{"+", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"-", "n"}], " ", "\[Alpha]"}], "-", 
          RowBox[{"m", " ", 
           SuperscriptBox["\[Alpha]", "2"]}], "-", 
          RowBox[{"2", " ", "n", " ", 
           SuperscriptBox["\[Alpha]", "2"]}]}], ")"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"+", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"-", "2"}], " ", "s", " ", "\[Alpha]"}], "-", 
          RowBox[{"4", " ", "s", " ", 
           SuperscriptBox["\[Alpha]", "2"]}], "-", 
          RowBox[{"t", " ", 
           SuperscriptBox["\[Alpha]", "2"]}]}], ")"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"+", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"2", " ", "t", " ", "\[Alpha]"}], "+", 
          SuperscriptBox["\[Alpha]", "2"], "+", 
          RowBox[{"2", " ", "r", " ", 
           SuperscriptBox["\[Alpha]", "2"]}], "+", 
          RowBox[{"2", " ", "t", " ", 
           SuperscriptBox["\[Alpha]", "2"]}], "+", 
          RowBox[{"2", " ", 
           SuperscriptBox["\[Alpha]", "3"]}], "+", 
          SuperscriptBox["\[Alpha]", "4"]}], ")"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"+", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"2", " ", "n", " ", "\[Alpha]"}], "+", 
          RowBox[{"m", " ", 
           SuperscriptBox["\[Alpha]", "2"]}], "+", 
          RowBox[{"2", " ", "n", " ", 
           SuperscriptBox["\[Alpha]", "2"]}]}], ")"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"+", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"4", " ", "s", " ", "\[Alpha]"}], "-", 
          RowBox[{"t", " ", "\[Alpha]"}], "-", 
          RowBox[{"2", " ", "r", " ", 
           SuperscriptBox["\[Alpha]", "2"]}], "+", 
          RowBox[{"4", " ", "s", " ", 
           SuperscriptBox["\[Alpha]", "2"]}], "-", 
          RowBox[{"t", " ", 
           SuperscriptBox["\[Alpha]", "2"]}], "-", 
          SuperscriptBox["\[Alpha]", "3"], "-", 
          SuperscriptBox["\[Alpha]", "4"]}], ")"}]}]}], "}"}], "\[Equal]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
      "}"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"m", ",", "n", ",", "r", ",", "s", ",", "t"}], "}"}]}], "]"}], "//",
   "Simplify"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"m", "\[Rule]", "0"}], ",", 
    RowBox[{"n", "\[Rule]", "0"}], ",", 
    RowBox[{"r", "\[Rule]", 
     RowBox[{
      FractionBox["1", "2"], " ", 
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"4", " ", "\[Alpha]"}], "+", 
        RowBox[{"3", " ", 
         SuperscriptBox["\[Alpha]", "2"]}]}], ")"}]}]}], ",", 
    RowBox[{"s", "\[Rule]", 
     FractionBox[
      SuperscriptBox["\[Alpha]", "2"], "2"]}], ",", 
    RowBox[{"t", "\[Rule]", 
     RowBox[{
      RowBox[{"-", "\[Alpha]"}], " ", 
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"2", " ", "\[Alpha]"}]}], ")"}]}]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.670774005258292*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.670783995717718*^9, 3.670783995968886*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"q0", "=", 
   RowBox[{"Exp", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"-", 
       FractionBox[
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"\[Alpha]", "+", "1"}], ")"}], "2"], "2"]}], 
      SuperscriptBox["x", "2"]}], "-", 
     RowBox[{
      FractionBox[
       RowBox[{"\[Alpha]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"2", "\[Alpha]"}], "+", "1"}], ")"}]}], "4"], 
      SuperscriptBox["y", "2"]}], "+", 
     RowBox[{"\[Alpha]", 
      RowBox[{"(", 
       RowBox[{"\[Alpha]", "+", "1"}], ")"}], "x", " ", "y"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dq", "=", 
   RowBox[{"q0", "*", 
    RowBox[{"HermiteH", "[", 
     RowBox[{"n", ",", "y"}], "]"}], "*", 
    RowBox[{"an", "[", 
     RowBox[{"x", ",", "y"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"0", "-", 
    RowBox[{
     SuperscriptBox["\[Alpha]", "2"], 
     RowBox[{"D", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"y", "-", "x"}], ")"}], "dq"}], ",", "x"}], "]"}]}], "+", 
    RowBox[{
     FractionBox["\[Alpha]", "2"], 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       RowBox[{
        FractionBox["\[Alpha]", "2"], 
        SuperscriptBox["y", "2"]}]}], ")"}], "dq"}], "+", 
    RowBox[{"D", "[", 
     RowBox[{"dq", ",", 
      RowBox[{"{", 
       RowBox[{"y", ",", "2"}], "}"}]}], "]"}]}], "//", "Simplify"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"%", "/", "q0"}], "//", "Simplify"}]}], "Input",
 CellChangeTimes->{{3.670784047759473*^9, 3.67078426064664*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"2", " ", "n", " ", 
   RowBox[{"a", "[", 
    RowBox[{"x", ",", "y", ",", "n"}], "]"}], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"2", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", "n"}], ")"}], " ", 
      RowBox[{"HermiteH", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "2"}], "+", "n"}], ",", "y"}], "]"}]}], "+", 
     RowBox[{"\[Alpha]", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"2", " ", "x", " ", 
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}]}], "-", 
        RowBox[{"y", " ", 
         RowBox[{"(", 
          RowBox[{"1", "+", 
           RowBox[{"2", " ", "\[Alpha]"}]}], ")"}]}]}], ")"}], " ", 
      RowBox[{"HermiteH", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "1"}], "+", "n"}], ",", "y"}], "]"}]}]}], ")"}]}], "+", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"4", " ", "n", " ", 
      RowBox[{"HermiteH", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "1"}], "+", "n"}], ",", "y"}], "]"}]}], "+", 
     RowBox[{"\[Alpha]", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"2", " ", "x", " ", 
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}]}], "-", 
        RowBox[{"y", " ", 
         RowBox[{"(", 
          RowBox[{"1", "+", 
           RowBox[{"2", " ", "\[Alpha]"}]}], ")"}]}]}], ")"}], " ", 
      RowBox[{"HermiteH", "[", 
       RowBox[{"n", ",", "y"}], "]"}]}]}], ")"}], " ", 
   RowBox[{
    SuperscriptBox["a", 
     TagBox[
      RowBox[{"(", 
       RowBox[{"0", ",", "1", ",", "0"}], ")"}],
      Derivative],
     MultilineFunction->None], "[", 
    RowBox[{"x", ",", "y", ",", "n"}], "]"}]}], "+", 
  RowBox[{
   RowBox[{"HermiteH", "[", 
    RowBox[{"n", ",", "y"}], "]"}], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      SuperscriptBox["a", 
       TagBox[
        RowBox[{"(", 
         RowBox[{"0", ",", "2", ",", "0"}], ")"}],
        Derivative],
       MultilineFunction->None], "[", 
      RowBox[{"x", ",", "y", ",", "n"}], "]"}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"x", "-", "y"}], ")"}], " ", 
      SuperscriptBox["\[Alpha]", "2"], " ", 
      RowBox[{
       SuperscriptBox["a", 
        TagBox[
         RowBox[{"(", 
          RowBox[{"1", ",", "0", ",", "0"}], ")"}],
         Derivative],
        MultilineFunction->None], "[", 
       RowBox[{"x", ",", "y", ",", "n"}], "]"}]}]}], ")"}]}]}]], "Output",
 CellChangeTimes->{3.670784240543215*^9}]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1366, 685},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
FrontEndVersion->"10.0 for Microsoft Windows (64-bit) (July 1, 2014)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 2646, 80, 147, "Input"],
Cell[3229, 104, 2238, 61, 33, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5504, 170, 2830, 73, 165, "Input"],
Cell[8337, 245, 904, 25, 49, "Output"]
}, Open  ]],
Cell[9256, 273, 1511, 46, 93, "Input"],
Cell[CellGroupData[{
Cell[10792, 323, 782, 22, 72, "Input"],
Cell[11577, 347, 558, 17, 62, "Output"],
Cell[12138, 366, 1577, 50, 67, "Output"],
Cell[13718, 418, 1579, 50, 67, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15334, 473, 406, 12, 46, "Input"],
Cell[15743, 487, 522, 18, 72, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16302, 510, 947, 28, 46, "Input"],
Cell[17252, 540, 1895, 57, 72, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[19184, 602, 1615, 46, 123, "Input"],
Cell[20802, 650, 30941, 519, 242, "Output"]
}, Open  ]],
Cell[51758, 1172, 196, 3, 112, "Input"],
Cell[CellGroupData[{
Cell[51979, 1179, 3783, 113, 169, "Input"],
Cell[55765, 1294, 2701, 70, 33, "Output"],
Cell[58469, 1366, 1307, 30, 33, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[59813, 1401, 2518, 73, 136, "Input"],
Cell[62334, 1476, 656, 19, 62, "Output"],
Cell[62993, 1497, 1932, 60, 67, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[64962, 1562, 659, 19, 75, "Input"],
Cell[65624, 1583, 1646, 53, 67, "Output"],
Cell[67273, 1638, 564, 18, 53, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[67874, 1661, 1102, 30, 57, "Input"],
Cell[68979, 1693, 1349, 43, 70, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[70365, 1741, 1077, 29, 52, "Input"],
Cell[71445, 1772, 489, 15, 73, "Output"],
Cell[71937, 1789, 1643, 50, 73, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[73617, 1844, 2188, 72, 137, "Input"],
Cell[75808, 1918, 365, 13, 73, "Output"],
Cell[76176, 1933, 1714, 57, 88, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[77927, 1995, 3523, 109, 116, "Input"],
Cell[81453, 2106, 1999, 60, 101, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[83489, 2171, 8359, 227, 393, "Input"],
Cell[91851, 2400, 3589, 71, 370, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[95477, 2476, 101, 1, 39, "Subsubsection"],
Cell[CellGroupData[{
Cell[95603, 2481, 2428, 65, 165, "Input"],
Cell[98034, 2548, 4182, 122, 148, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[102253, 2675, 339, 9, 52, "Input"],
Cell[102595, 2686, 1818, 54, 47, "Output"],
Cell[104416, 2742, 2845, 89, 98, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[107298, 2836, 757, 19, 72, "Input"],
Cell[108058, 2857, 5458, 105, 180, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[113553, 2967, 1481, 37, 158, "Input"],
Cell[115037, 3006, 3036, 63, 376, "Output"]
}, Open  ]],
Cell[118088, 3072, 172, 3, 92, "Input"],
Cell[CellGroupData[{
Cell[118285, 3079, 1613, 50, 122, "Input"],
Cell[119901, 3131, 111911, 1829, 192, 104724, 1710, "CachedBoxData", \
"BoxData", "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[231849, 4965, 312, 9, 33, "Input"],
Cell[232164, 4976, 548, 11, 21, "Message"],
Cell[232715, 4989, 308, 8, 31, "Output"]
}, Open  ]],
Cell[233038, 5000, 199, 3, 112, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[233274, 5008, 101, 1, 39, "Subsubsection"],
Cell[CellGroupData[{
Cell[233400, 5013, 2194, 71, 134, "Input"],
Cell[235597, 5086, 2083, 58, 33, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[237717, 5149, 2616, 70, 165, "Input"],
Cell[240336, 5221, 748, 23, 49, "Output"]
}, Open  ]],
Cell[241099, 5247, 172, 3, 92, "Input"],
Cell[CellGroupData[{
Cell[241296, 5254, 1633, 54, 125, "Input"],
Cell[242932, 5310, 2529, 82, 54, "Output"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
